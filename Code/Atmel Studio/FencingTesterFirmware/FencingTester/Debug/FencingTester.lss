
FencingTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000014f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001484  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000039  00800100  00800100  000014f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001528  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002399  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e92  00000000  00000000  00003a79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ef8  00000000  00000000  0000490b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004f8  00000000  00000000  00005804  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ae0  00000000  00000000  00005cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001366  00000000  00000000  000067dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00007b42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
       4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
       8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
       c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      10:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__vector_4>
      14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      1c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__vector_7>
      20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      2c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__vector_11>
      30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      38:	0c 94 90 01 	jmp	0x320	; 0x320 <__vector_14>
      3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000068 <__ctors_start>:
      68:	27 03       	mulsu	r18, r23

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 33       	cpi	r26, 0x39	; 57
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>

00000086 <__do_global_ctors>:
      86:	10 e0       	ldi	r17, 0x00	; 0
      88:	c5 e3       	ldi	r28, 0x35	; 53
      8a:	d0 e0       	ldi	r29, 0x00	; 0
      8c:	04 c0       	rjmp	.+8      	; 0x96 <__do_global_ctors+0x10>
      8e:	21 97       	sbiw	r28, 0x01	; 1
      90:	fe 01       	movw	r30, r28
      92:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__tablejump2__>
      96:	c4 33       	cpi	r28, 0x34	; 52
      98:	d1 07       	cpc	r29, r17
      9a:	c9 f7       	brne	.-14     	; 0x8e <__do_global_ctors+0x8>
      9c:	0e 94 02 02 	call	0x404	; 0x404 <main>
      a0:	0c 94 40 0a 	jmp	0x1480	; 0x1480 <_exit>

000000a4 <__bad_interrupt>:
      a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <_ZN8Bargraph8setValueEs>:
ï»¿#include "Bargraph.h"

void Bargraph::setValue(short int value){
		/* Checks that value is in the input range*/
		if(value == 0){ //If we want to display an empty bgraph we need to otput to an unused pin, done with value = 10
      a8:	61 15       	cp	r22, r1
      aa:	71 05       	cpc	r23, r1
      ac:	09 f4       	brne	.+2      	; 0xb0 <_ZN8Bargraph8setValueEs+0x8>
      ae:	48 c0       	rjmp	.+144    	; 0x140 <_ZN8Bargraph8setValueEs+0x98>
      b0:	6b 30       	cpi	r22, 0x0B	; 11
      b2:	71 05       	cpc	r23, r1
      b4:	14 f0       	brlt	.+4      	; 0xba <_ZN8Bargraph8setValueEs+0x12>
      b6:	6a e0       	ldi	r22, 0x0A	; 10
      b8:	70 e0       	ldi	r23, 0x00	; 0
			value = 11;
		}else if(value > 10){
			value = 10;
		}
		
		lastValue = value;
      ba:	fc 01       	movw	r30, r24
      bc:	61 83       	std	Z+1, r22	; 0x01
		/*If we need to display the value, processes it*/
		if(isOn){
      be:	80 81       	ld	r24, Z
      c0:	88 23       	and	r24, r24
      c2:	09 f4       	brne	.+2      	; 0xc6 <_ZN8Bargraph8setValueEs+0x1e>
      c4:	43 c0       	rjmp	.+134    	; 0x14c <_ZN8Bargraph8setValueEs+0xa4>
			value--;
      c6:	61 50       	subi	r22, 0x01	; 1
      c8:	71 09       	sbc	r23, r1
      ca:	cb 01       	movw	r24, r22
			/*S3*/
			if(value >> 3){
      cc:	9b 01       	movw	r18, r22
      ce:	35 95       	asr	r19
      d0:	27 95       	ror	r18
      d2:	35 95       	asr	r19
      d4:	27 95       	ror	r18
      d6:	35 95       	asr	r19
      d8:	27 95       	ror	r18
      da:	23 2b       	or	r18, r19
      dc:	39 f0       	breq	.+14     	; 0xec <_ZN8Bargraph8setValueEs+0x44>
      de:	04 c0       	rjmp	.+8      	; 0xe8 <_ZN8Bargraph8setValueEs+0x40>
		}
		
		lastValue = value;
		/*If we need to display the value, processes it*/
		if(isOn){
			value--;
      e0:	8a e0       	ldi	r24, 0x0A	; 10
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	6a e0       	ldi	r22, 0x0A	; 10
      e6:	70 e0       	ldi	r23, 0x00	; 0
			/*S3*/
			if(value >> 3){
				PORTD |= (1 << PORTD5);
      e8:	5d 9a       	sbi	0x0b, 5	; 11
      ea:	01 c0       	rjmp	.+2      	; 0xee <_ZN8Bargraph8setValueEs+0x46>
			}else{
				PORTD &= ~(1 << PORTD5);
      ec:	5d 98       	cbi	0x0b, 5	; 11
			}
			/*S2*/
			if(value%8 >> 2){
      ee:	9c 01       	movw	r18, r24
      f0:	27 70       	andi	r18, 0x07	; 7
      f2:	30 78       	andi	r19, 0x80	; 128
      f4:	33 23       	and	r19, r19
      f6:	34 f4       	brge	.+12     	; 0x104 <_ZN8Bargraph8setValueEs+0x5c>
      f8:	21 50       	subi	r18, 0x01	; 1
      fa:	31 09       	sbc	r19, r1
      fc:	28 6f       	ori	r18, 0xF8	; 248
      fe:	3f 6f       	ori	r19, 0xFF	; 255
     100:	2f 5f       	subi	r18, 0xFF	; 255
     102:	3f 4f       	sbci	r19, 0xFF	; 255
     104:	35 95       	asr	r19
     106:	27 95       	ror	r18
     108:	35 95       	asr	r19
     10a:	27 95       	ror	r18
     10c:	23 2b       	or	r18, r19
     10e:	11 f0       	breq	.+4      	; 0x114 <_ZN8Bargraph8setValueEs+0x6c>
				PORTD |= (1 << PORTD4);
     110:	5c 9a       	sbi	0x0b, 4	; 11
     112:	01 c0       	rjmp	.+2      	; 0x116 <_ZN8Bargraph8setValueEs+0x6e>
			}else{
				PORTD &= ~(1 << PORTD4);
     114:	5c 98       	cbi	0x0b, 4	; 11
			}
			/*S1*/
			if(value%4 >> 1){
     116:	83 70       	andi	r24, 0x03	; 3
     118:	90 78       	andi	r25, 0x80	; 128
     11a:	99 23       	and	r25, r25
     11c:	24 f4       	brge	.+8      	; 0x126 <_ZN8Bargraph8setValueEs+0x7e>
     11e:	01 97       	sbiw	r24, 0x01	; 1
     120:	8c 6f       	ori	r24, 0xFC	; 252
     122:	9f 6f       	ori	r25, 0xFF	; 255
     124:	01 96       	adiw	r24, 0x01	; 1
     126:	95 95       	asr	r25
     128:	87 95       	ror	r24
     12a:	89 2b       	or	r24, r25
     12c:	11 f0       	breq	.+4      	; 0x132 <_ZN8Bargraph8setValueEs+0x8a>
				PORTD |= (1 << PORTD3);
     12e:	5b 9a       	sbi	0x0b, 3	; 11
     130:	01 c0       	rjmp	.+2      	; 0x134 <_ZN8Bargraph8setValueEs+0x8c>
			}else{
				PORTD &= ~(1 << PORTD3);
     132:	5b 98       	cbi	0x0b, 3	; 11
			}
			/*S0*/
			if(value%2){
     134:	60 ff       	sbrs	r22, 0
     136:	02 c0       	rjmp	.+4      	; 0x13c <_ZN8Bargraph8setValueEs+0x94>
				PORTD |= (1 << PORTD2);
     138:	5a 9a       	sbi	0x0b, 2	; 11
     13a:	08 95       	ret
			}else{
				PORTD &= ~(1 << PORTD2);
     13c:	5a 98       	cbi	0x0b, 2	; 11
			}
				
		}
	}
     13e:	08 95       	ret
			value = 11;
		}else if(value > 10){
			value = 10;
		}
		
		lastValue = value;
     140:	2b e0       	ldi	r18, 0x0B	; 11
     142:	fc 01       	movw	r30, r24
     144:	21 83       	std	Z+1, r18	; 0x01
		/*If we need to display the value, processes it*/
		if(isOn){
     146:	80 81       	ld	r24, Z
     148:	81 11       	cpse	r24, r1
     14a:	ca cf       	rjmp	.-108    	; 0xe0 <_ZN8Bargraph8setValueEs+0x38>
     14c:	08 95       	ret

0000014e <_ZN8Bargraph7displayEb>:
				
		}
	}
		
void Bargraph::display(bool display){
	isOn = display;
     14e:	fc 01       	movw	r30, r24
     150:	60 83       	st	Z, r22
	if(!isOn){ //if the bargraph is off we keep it's value at 0 so it doesn't light up
     152:	61 11       	cpse	r22, r1
     154:	05 c0       	rjmp	.+10     	; 0x160 <_ZN8Bargraph7displayEb+0x12>
		setValue(0);
     156:	60 e0       	ldi	r22, 0x00	; 0
     158:	70 e0       	ldi	r23, 0x00	; 0
     15a:	0e 94 54 00 	call	0xa8	; 0xa8 <_ZN8Bargraph8setValueEs>
     15e:	08 95       	ret
	}else{
		setValue(lastValue);
     160:	fc 01       	movw	r30, r24
     162:	61 81       	ldd	r22, Z+1	; 0x01
     164:	70 e0       	ldi	r23, 0x00	; 0
     166:	0e 94 54 00 	call	0xa8	; 0xa8 <_ZN8Bargraph8setValueEs>
     16a:	08 95       	ret

0000016c <_ZN8BargraphC1Ev>:
	}
}
		
Bargraph::Bargraph(){
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
     170:	ec 01       	movw	r28, r24
	/* Sets the output pins as outputs*/
	DDRD |= (1 << PORTD2) | (1 << PORTD3) | (1 << PORTD4) | (1 << PORTD5);
     172:	8a b1       	in	r24, 0x0a	; 10
     174:	8c 63       	ori	r24, 0x3C	; 60
     176:	8a b9       	out	0x0a, r24	; 10
			
	/*Ensures that their logical level is LOW*/
	PORTD &= ~(1 << PORTD2) & ~(1 << PORTD3) & ~(1 << PORTD4) & ~(1 << PORTD5);		
     178:	8b b1       	in	r24, 0x0b	; 11
     17a:	83 7c       	andi	r24, 0xC3	; 195
     17c:	8b b9       	out	0x0b, r24	; 11
			
	display(true);
     17e:	61 e0       	ldi	r22, 0x01	; 1
     180:	ce 01       	movw	r24, r28
     182:	0e 94 a7 00 	call	0x14e	; 0x14e <_ZN8Bargraph7displayEb>
	setValue(0);
     186:	60 e0       	ldi	r22, 0x00	; 0
     188:	70 e0       	ldi	r23, 0x00	; 0
     18a:	ce 01       	movw	r24, r28
     18c:	0e 94 54 00 	call	0xa8	; 0xa8 <_ZN8Bargraph8setValueEs>
}
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <_Z10set_timer0v>:
	//Disables the timer with the power management options
	//PRR |= (1 << PRTIM0);
		
	//Disables interrupts while we mess with them
	unsigned char sreg;
	sreg = SREG;
     196:	9f b7       	in	r25, 0x3f	; 63
	cli();
     198:	f8 94       	cli
	
	//Ensures 0C0A and OC0B are disconnected
	TCCR0A &= ~(1 << COM0A1) & ~(1 << COM0A0) & ~(1 << COM0B1) & ~(1 << COM0B0); 
     19a:	84 b5       	in	r24, 0x24	; 36
     19c:	8f 70       	andi	r24, 0x0F	; 15
     19e:	84 bd       	out	0x24, r24	; 36
	
	// Set timer to mode 2 (CTC)
	TCCR0A &= ~(1 << WGM00);
     1a0:	84 b5       	in	r24, 0x24	; 36
     1a2:	8e 7f       	andi	r24, 0xFE	; 254
     1a4:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << WGM01);
     1a6:	84 b5       	in	r24, 0x24	; 36
     1a8:	82 60       	ori	r24, 0x02	; 2
     1aa:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~(1 << WGM02);
     1ac:	85 b5       	in	r24, 0x25	; 37
     1ae:	87 7f       	andi	r24, 0xF7	; 247
     1b0:	85 bd       	out	0x25, r24	; 37
	
	//Setting the prescaler to 0 disables the timer
	TCCR0B &= ~(1 << CS02) & ~(1 << CS01) & ~(1 << CS00);
     1b2:	85 b5       	in	r24, 0x25	; 37
     1b4:	88 7f       	andi	r24, 0xF8	; 248
     1b6:	85 bd       	out	0x25, r24	; 37
	
	//Enables interrupt when timer compares to OCR0A and disables OCR0B and overflow
	TIMSK0 &= ~(1 << OCIE0B) & ~(1 << TOIE0);
     1b8:	ee e6       	ldi	r30, 0x6E	; 110
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	80 81       	ld	r24, Z
     1be:	8a 7f       	andi	r24, 0xFA	; 250
     1c0:	80 83       	st	Z, r24
	TIMSK0 |= (1 << OCIE0A);
     1c2:	80 81       	ld	r24, Z
     1c4:	82 60       	ori	r24, 0x02	; 2
     1c6:	80 83       	st	Z, r24
	
	//Sets the top value at 78 counts. At that value it throws an interrupt
	OCR0A = 78; //78 counts = 5ms
     1c8:	8e e4       	ldi	r24, 0x4E	; 78
     1ca:	87 bd       	out	0x27, r24	; 39
	
	//Ensures the timer begins at 0
	TCNT0 = 0;
     1cc:	16 bc       	out	0x26, r1	; 38
	
	//Sets interrupt back to what they were
	SREG = sreg;		
     1ce:	9f bf       	out	0x3f, r25	; 63
     1d0:	08 95       	ret

000001d2 <_Z13enable_timer0v>:
}

void enable_timer0(){
	//Ensures the counters begins at 0
	TCNT0 = 0;
     1d2:	16 bc       	out	0x26, r1	; 38
	
	//Sets the prescaler on FCPU/1024 to start it
	TCCR0B|=(1<<CS02)|(1<<CS00);
     1d4:	85 b5       	in	r24, 0x25	; 37
     1d6:	85 60       	ori	r24, 0x05	; 5
     1d8:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1 << CS01);
     1da:	85 b5       	in	r24, 0x25	; 37
     1dc:	8d 7f       	andi	r24, 0xFD	; 253
     1de:	85 bd       	out	0x25, r24	; 37
     1e0:	08 95       	ret

000001e2 <_Z14disable_timer0v>:
}

void disable_timer0(){
	//Setting the prescaler to 0 disables the timer
	TCCR0B &= ~(1 << CS02) & ~(1 << CS01) & ~(1 << CS00);
     1e2:	85 b5       	in	r24, 0x25	; 37
     1e4:	88 7f       	andi	r24, 0xF8	; 248
     1e6:	85 bd       	out	0x25, r24	; 37
     1e8:	08 95       	ret

000001ea <_Z10set_timer1v>:
	//Disables the timer with the power management options
	//PRR |= (1 << PRTIM1);
	
	//Disables interrupts while we mess with them
	unsigned char sreg;
	sreg = SREG;
     1ea:	9f b7       	in	r25, 0x3f	; 63
	cli();
     1ec:	f8 94       	cli
	
	//Ensures 0C1A and OC1B are disconnected
	TCCR1A &= ~(1 << COM1A1) & ~(1 << COM1A0) & ~(1 << COM1B1) & ~(1 << COM1B0);
     1ee:	e0 e8       	ldi	r30, 0x80	; 128
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	80 81       	ld	r24, Z
     1f4:	8f 70       	andi	r24, 0x0F	; 15
     1f6:	80 83       	st	Z, r24
	
	// Set timer to mode 4 (CTC)
	TCCR1A &= ~(1 << WGM11) & ~(1 << WGM10);
     1f8:	80 81       	ld	r24, Z
     1fa:	8c 7f       	andi	r24, 0xFC	; 252
     1fc:	80 83       	st	Z, r24
	TCCR1B &= ~(1 << WGM13);
     1fe:	e1 e8       	ldi	r30, 0x81	; 129
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	80 81       	ld	r24, Z
     204:	8f 7e       	andi	r24, 0xEF	; 239
     206:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12);
     208:	80 81       	ld	r24, Z
     20a:	88 60       	ori	r24, 0x08	; 8
     20c:	80 83       	st	Z, r24
	
	//ensures unused functionalities are disabled (Noise cancelation and edge selection)
	TCCR1B &= ~(1 << ICNC1) & ~(1 << ICES1);
     20e:	80 81       	ld	r24, Z
     210:	8f 73       	andi	r24, 0x3F	; 63
     212:	80 83       	st	Z, r24
	
	//Sets the prescaler on 0 to disable counter
	TCCR1B &= ~(1 << CS12) & ~(1 << CS11) & ~(1 << CS10);
     214:	80 81       	ld	r24, Z
     216:	88 7f       	andi	r24, 0xF8	; 248
     218:	80 83       	st	Z, r24
	
	//Enables interrupt when timer compares to OCR0A and disables OCR1B, input capture and overflow
	TIMSK1 &= ~(1 << OCIE1B) & ~(1 << TOIE1) & ~(1 << ICIE1);
     21a:	ef e6       	ldi	r30, 0x6F	; 111
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	8a 7d       	andi	r24, 0xDA	; 218
     222:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);
     224:	80 81       	ld	r24, Z
     226:	82 60       	ori	r24, 0x02	; 2
     228:	80 83       	st	Z, r24
	
	//Sets the top value at 78 counts. At that value it throws an interrupt
	OCR1AH = 0;
     22a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	OCR1AL = 78; //78 counts = 5ms
     22e:	8e e4       	ldi	r24, 0x4E	; 78
     230:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	//Ensures the timer begins at 0
	TCNT1H = 0;
     234:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L = 0;
     238:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	//Sets interrupt back to what they were
	SREG = sreg;
     23c:	9f bf       	out	0x3f, r25	; 63
     23e:	08 95       	ret

00000240 <_Z13enable_timer1v>:
}

void enable_timer1(){
	//Ensures the counters begins at 0
	TCNT1H = 0;
     240:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L = 0;
     244:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	//Sets the prescaler on FCPU/1024
	TCCR1B |= (1 << CS12) | (1 << CS10);
     248:	e1 e8       	ldi	r30, 0x81	; 129
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	80 81       	ld	r24, Z
     24e:	85 60       	ori	r24, 0x05	; 5
     250:	80 83       	st	Z, r24
	TCCR1B &= ~(1 << CS11);
     252:	80 81       	ld	r24, Z
     254:	8d 7f       	andi	r24, 0xFD	; 253
     256:	80 83       	st	Z, r24
     258:	08 95       	ret

0000025a <_Z14disable_timer1v>:
}

void disable_timer1(){
	//Disables the timer
	//PRR |= (1 << PRTIM1);
	TCCR1B &= ~(1 << CS12) & ~(1 << CS11) & ~(1 << CS10);
     25a:	e1 e8       	ldi	r30, 0x81	; 129
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	88 7f       	andi	r24, 0xF8	; 248
     262:	80 83       	st	Z, r24
     264:	08 95       	ret

00000266 <_Z10set_timer2v>:
	//Disables the timer with the power management options
	//PRR |= (1 << PRTIM2);
		
	//Disables interrupts while we mess with them
	unsigned char sreg;
	sreg = SREG;
     266:	9f b7       	in	r25, 0x3f	; 63
	cli();
     268:	f8 94       	cli
		
	//Ensures 0C0A and OC0B are disconnected
	TCCR2A &= ~(1 << COM2A1) & ~(1 << COM2A0) & ~(1 << COM2B1) & ~(1 << COM2B0);
     26a:	e0 eb       	ldi	r30, 0xB0	; 176
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	80 81       	ld	r24, Z
     270:	8f 70       	andi	r24, 0x0F	; 15
     272:	80 83       	st	Z, r24
		
	// Set timer to mode 2 (CTC)
	TCCR2A &= ~(1 << WGM20);
     274:	80 81       	ld	r24, Z
     276:	8e 7f       	andi	r24, 0xFE	; 254
     278:	80 83       	st	Z, r24
	TCCR2A |= (1 << WGM21);
     27a:	80 81       	ld	r24, Z
     27c:	82 60       	ori	r24, 0x02	; 2
     27e:	80 83       	st	Z, r24
	TCCR2B &= ~(1 << WGM22);
     280:	e1 eb       	ldi	r30, 0xB1	; 177
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	80 81       	ld	r24, Z
     286:	87 7f       	andi	r24, 0xF7	; 247
     288:	80 83       	st	Z, r24
		
	//Sets the prescaler on 0
	TCCR2B &= ~(1<<CS22) & ~(1 << CS21) & ~(1<<CS20);
     28a:	80 81       	ld	r24, Z
     28c:	88 7f       	andi	r24, 0xF8	; 248
     28e:	80 83       	st	Z, r24
		
	//Enables interrupt when timer compares to OCR0A and disables OCR0B and overflow
	TIMSK2 &= ~(1 << OCIE2B) & ~(1 << TOIE2);
     290:	e0 e7       	ldi	r30, 0x70	; 112
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	80 81       	ld	r24, Z
     296:	8a 7f       	andi	r24, 0xFA	; 250
     298:	80 83       	st	Z, r24
	TIMSK2 |= (1 << OCIE2A);
     29a:	80 81       	ld	r24, Z
     29c:	82 60       	ori	r24, 0x02	; 2
     29e:	80 83       	st	Z, r24
		
	//Sets the top value at 78 counts. At that value it throws an interrupt
	OCR2A = 78; //78 counts = 5ms
     2a0:	8e e4       	ldi	r24, 0x4E	; 78
     2a2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		
	//Managing asynchronous settings
	ASSR &= ~(1 << AS2);
     2a6:	e6 eb       	ldi	r30, 0xB6	; 182
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 81       	ld	r24, Z
     2ac:	8f 7d       	andi	r24, 0xDF	; 223
     2ae:	80 83       	st	Z, r24
		
	//Ensures the timer begins at 0
	TCNT2 = 0;
     2b0:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
		
	//Sets interrupt back to what they were
	SREG = sreg;
     2b4:	9f bf       	out	0x3f, r25	; 63
     2b6:	08 95       	ret

000002b8 <_Z13enable_timer2v>:
}

void enable_timer2(){
	//Ensures the counters begins at 0
	TCNT2 = 0;
     2b8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	
	//Sets the prescaler on FCPU/1024
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);
     2bc:	e1 eb       	ldi	r30, 0xB1	; 177
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	87 60       	ori	r24, 0x07	; 7
     2c4:	80 83       	st	Z, r24
     2c6:	08 95       	ret

000002c8 <_Z14disable_timer2v>:
}

void disable_timer2(){
	//Disables the timer
	TCCR2B &= ~(1<<CS22) & ~(1 << CS21) & ~(1<<CS20);
     2c8:	e1 eb       	ldi	r30, 0xB1	; 177
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	80 81       	ld	r24, Z
     2ce:	88 7f       	andi	r24, 0xF8	; 248
     2d0:	80 83       	st	Z, r24
     2d2:	08 95       	ret

000002d4 <__vector_4>:
float remap (float in, float min_in, float max_in, float min_out, float max_out){
	float alpha = (min_out - max_out)/(min_in - max_in);
	float beta = max_out - alpha * max_in;
	
	return alpha*in + beta;
}
     2d4:	1f 92       	push	r1
     2d6:	0f 92       	push	r0
     2d8:	0f b6       	in	r0, 0x3f	; 63
     2da:	0f 92       	push	r0
     2dc:	11 24       	eor	r1, r1
     2de:	2f 93       	push	r18
     2e0:	3f 93       	push	r19
     2e2:	4f 93       	push	r20
     2e4:	5f 93       	push	r21
     2e6:	6f 93       	push	r22
     2e8:	7f 93       	push	r23
     2ea:	8f 93       	push	r24
     2ec:	9f 93       	push	r25
     2ee:	af 93       	push	r26
     2f0:	bf 93       	push	r27
     2f2:	ef 93       	push	r30
     2f4:	ff 93       	push	r31
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	91 e0       	ldi	r25, 0x01	; 1
     2fa:	0e 94 92 04 	call	0x924	; 0x924 <_ZN7Monitor17interrupt_routineEv>
     2fe:	ff 91       	pop	r31
     300:	ef 91       	pop	r30
     302:	bf 91       	pop	r27
     304:	af 91       	pop	r26
     306:	9f 91       	pop	r25
     308:	8f 91       	pop	r24
     30a:	7f 91       	pop	r23
     30c:	6f 91       	pop	r22
     30e:	5f 91       	pop	r21
     310:	4f 91       	pop	r20
     312:	3f 91       	pop	r19
     314:	2f 91       	pop	r18
     316:	0f 90       	pop	r0
     318:	0f be       	out	0x3f, r0	; 63
     31a:	0f 90       	pop	r0
     31c:	1f 90       	pop	r1
     31e:	18 95       	reti

00000320 <__vector_14>:
     320:	1f 92       	push	r1
     322:	0f 92       	push	r0
     324:	0f b6       	in	r0, 0x3f	; 63
     326:	0f 92       	push	r0
     328:	11 24       	eor	r1, r1
     32a:	2f 93       	push	r18
     32c:	3f 93       	push	r19
     32e:	4f 93       	push	r20
     330:	5f 93       	push	r21
     332:	6f 93       	push	r22
     334:	7f 93       	push	r23
     336:	8f 93       	push	r24
     338:	9f 93       	push	r25
     33a:	af 93       	push	r26
     33c:	bf 93       	push	r27
     33e:	ef 93       	push	r30
     340:	ff 93       	push	r31
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	91 e0       	ldi	r25, 0x01	; 1
     346:	0e 94 88 05 	call	0xb10	; 0xb10 <_ZN7Monitor16channel1_timeoutEv>
     34a:	ff 91       	pop	r31
     34c:	ef 91       	pop	r30
     34e:	bf 91       	pop	r27
     350:	af 91       	pop	r26
     352:	9f 91       	pop	r25
     354:	8f 91       	pop	r24
     356:	7f 91       	pop	r23
     358:	6f 91       	pop	r22
     35a:	5f 91       	pop	r21
     35c:	4f 91       	pop	r20
     35e:	3f 91       	pop	r19
     360:	2f 91       	pop	r18
     362:	0f 90       	pop	r0
     364:	0f be       	out	0x3f, r0	; 63
     366:	0f 90       	pop	r0
     368:	1f 90       	pop	r1
     36a:	18 95       	reti

0000036c <__vector_11>:
     36c:	1f 92       	push	r1
     36e:	0f 92       	push	r0
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	0f 92       	push	r0
     374:	11 24       	eor	r1, r1
     376:	2f 93       	push	r18
     378:	3f 93       	push	r19
     37a:	4f 93       	push	r20
     37c:	5f 93       	push	r21
     37e:	6f 93       	push	r22
     380:	7f 93       	push	r23
     382:	8f 93       	push	r24
     384:	9f 93       	push	r25
     386:	af 93       	push	r26
     388:	bf 93       	push	r27
     38a:	ef 93       	push	r30
     38c:	ff 93       	push	r31
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	91 e0       	ldi	r25, 0x01	; 1
     392:	0e 94 c8 05 	call	0xb90	; 0xb90 <_ZN7Monitor16channel2_timeoutEv>
     396:	ff 91       	pop	r31
     398:	ef 91       	pop	r30
     39a:	bf 91       	pop	r27
     39c:	af 91       	pop	r26
     39e:	9f 91       	pop	r25
     3a0:	8f 91       	pop	r24
     3a2:	7f 91       	pop	r23
     3a4:	6f 91       	pop	r22
     3a6:	5f 91       	pop	r21
     3a8:	4f 91       	pop	r20
     3aa:	3f 91       	pop	r19
     3ac:	2f 91       	pop	r18
     3ae:	0f 90       	pop	r0
     3b0:	0f be       	out	0x3f, r0	; 63
     3b2:	0f 90       	pop	r0
     3b4:	1f 90       	pop	r1
     3b6:	18 95       	reti

000003b8 <__vector_7>:
     3b8:	1f 92       	push	r1
     3ba:	0f 92       	push	r0
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	0f 92       	push	r0
     3c0:	11 24       	eor	r1, r1
     3c2:	2f 93       	push	r18
     3c4:	3f 93       	push	r19
     3c6:	4f 93       	push	r20
     3c8:	5f 93       	push	r21
     3ca:	6f 93       	push	r22
     3cc:	7f 93       	push	r23
     3ce:	8f 93       	push	r24
     3d0:	9f 93       	push	r25
     3d2:	af 93       	push	r26
     3d4:	bf 93       	push	r27
     3d6:	ef 93       	push	r30
     3d8:	ff 93       	push	r31
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	91 e0       	ldi	r25, 0x01	; 1
     3de:	0e 94 08 06 	call	0xc10	; 0xc10 <_ZN7Monitor16channel3_timeoutEv>
     3e2:	ff 91       	pop	r31
     3e4:	ef 91       	pop	r30
     3e6:	bf 91       	pop	r27
     3e8:	af 91       	pop	r26
     3ea:	9f 91       	pop	r25
     3ec:	8f 91       	pop	r24
     3ee:	7f 91       	pop	r23
     3f0:	6f 91       	pop	r22
     3f2:	5f 91       	pop	r21
     3f4:	4f 91       	pop	r20
     3f6:	3f 91       	pop	r19
     3f8:	2f 91       	pop	r18
     3fa:	0f 90       	pop	r0
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	0f 90       	pop	r0
     400:	1f 90       	pop	r1
     402:	18 95       	reti

00000404 <main>:
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
     40c:	2c 97       	sbiw	r28, 0x0c	; 12
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	f8 94       	cli
     412:	de bf       	out	0x3e, r29	; 62
     414:	0f be       	out	0x3f, r0	; 63
     416:	cd bf       	out	0x3d, r28	; 61
     418:	ce 01       	movw	r24, r28
     41a:	01 96       	adiw	r24, 0x01	; 1
     41c:	0e 94 b6 00 	call	0x16c	; 0x16c <_ZN8BargraphC1Ev>
     420:	0f 2e       	mov	r0, r31
     422:	f5 e0       	ldi	r31, 0x05	; 5
     424:	ef 2e       	mov	r14, r31
     426:	f1 2c       	mov	r15, r1
     428:	f0 2d       	mov	r31, r0
     42a:	00 e0       	ldi	r16, 0x00	; 0
     42c:	10 ea       	ldi	r17, 0xA0	; 160
     42e:	25 e9       	ldi	r18, 0x95	; 149
     430:	33 e4       	ldi	r19, 0x43	; 67
     432:	40 e0       	ldi	r20, 0x00	; 0
     434:	50 e0       	ldi	r21, 0x00	; 0
     436:	6c e7       	ldi	r22, 0x7C	; 124
     438:	72 e4       	ldi	r23, 0x42	; 66
     43a:	ce 01       	movw	r24, r28
     43c:	03 96       	adiw	r24, 0x03	; 3
     43e:	0e 94 cc 06 	call	0xd98	; 0xd98 <_ZN8OhmmeterC1Effi>
     442:	8e e1       	ldi	r24, 0x1E	; 30
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	0e 94 82 07 	call	0xf04	; 0xf04 <_ZN9StatusLed8getColorEv>
     44a:	d8 2e       	mov	r13, r24
     44c:	87 e2       	ldi	r24, 0x27	; 39
     44e:	91 e0       	ldi	r25, 0x01	; 1
     450:	0e 94 82 07 	call	0xf04	; 0xf04 <_ZN9StatusLed8getColorEv>
     454:	e8 2e       	mov	r14, r24
     456:	80 e3       	ldi	r24, 0x30	; 48
     458:	91 e0       	ldi	r25, 0x01	; 1
     45a:	0e 94 82 07 	call	0xf04	; 0xf04 <_ZN9StatusLed8getColorEv>
     45e:	f8 2e       	mov	r15, r24
     460:	63 e0       	ldi	r22, 0x03	; 3
     462:	8e e1       	ldi	r24, 0x1E	; 30
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN9StatusLed8setColorENS_9ledColorsE>
     46a:	63 e0       	ldi	r22, 0x03	; 3
     46c:	87 e2       	ldi	r24, 0x27	; 39
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN9StatusLed8setColorENS_9ledColorsE>
     474:	63 e0       	ldi	r22, 0x03	; 3
     476:	80 e3       	ldi	r24, 0x30	; 48
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN9StatusLed8setColorENS_9ledColorsE>
     47e:	6a e0       	ldi	r22, 0x0A	; 10
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	ce 01       	movw	r24, r28
     484:	01 96       	adiw	r24, 0x01	; 1
     486:	0e 94 54 00 	call	0xa8	; 0xa8 <_ZN8Bargraph8setValueEs>
     48a:	2f ef       	ldi	r18, 0xFF	; 255
     48c:	84 e3       	ldi	r24, 0x34	; 52
     48e:	9c e0       	ldi	r25, 0x0C	; 12
     490:	21 50       	subi	r18, 0x01	; 1
     492:	80 40       	sbci	r24, 0x00	; 0
     494:	90 40       	sbci	r25, 0x00	; 0
     496:	e1 f7       	brne	.-8      	; 0x490 <main+0x8c>
     498:	00 c0       	rjmp	.+0      	; 0x49a <main+0x96>
     49a:	00 00       	nop
     49c:	a4 e6       	ldi	r26, 0x64	; 100
     49e:	b0 e0       	ldi	r27, 0x00	; 0
     4a0:	8c 91       	ld	r24, X
     4a2:	8e 7f       	andi	r24, 0xFE	; 254
     4a4:	8c 93       	st	X, r24
     4a6:	ec e7       	ldi	r30, 0x7C	; 124
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	80 81       	ld	r24, Z
     4ac:	84 64       	ori	r24, 0x44	; 68
     4ae:	80 83       	st	Z, r24
     4b0:	ea e7       	ldi	r30, 0x7A	; 122
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	80 81       	ld	r24, Z
     4b6:	87 60       	ori	r24, 0x07	; 7
     4b8:	80 83       	st	Z, r24
     4ba:	8c 91       	ld	r24, X
     4bc:	8e 7f       	andi	r24, 0xFE	; 254
     4be:	8c 93       	st	X, r24
     4c0:	80 81       	ld	r24, Z
     4c2:	80 68       	ori	r24, 0x80	; 128
     4c4:	80 83       	st	Z, r24
     4c6:	80 81       	ld	r24, Z
     4c8:	80 64       	ori	r24, 0x40	; 64
     4ca:	80 83       	st	Z, r24
     4cc:	80 81       	ld	r24, Z
     4ce:	84 ff       	sbrs	r24, 4
     4d0:	fd cf       	rjmp	.-6      	; 0x4cc <main+0xc8>
     4d2:	60 e0       	ldi	r22, 0x00	; 0
     4d4:	70 e0       	ldi	r23, 0x00	; 0
     4d6:	ce 01       	movw	r24, r28
     4d8:	01 96       	adiw	r24, 0x01	; 1
     4da:	0e 94 54 00 	call	0xa8	; 0xa8 <_ZN8Bargraph8setValueEs>
     4de:	2f ef       	ldi	r18, 0xFF	; 255
     4e0:	84 e3       	ldi	r24, 0x34	; 52
     4e2:	9c e0       	ldi	r25, 0x0C	; 12
     4e4:	21 50       	subi	r18, 0x01	; 1
     4e6:	80 40       	sbci	r24, 0x00	; 0
     4e8:	90 40       	sbci	r25, 0x00	; 0
     4ea:	e1 f7       	brne	.-8      	; 0x4e4 <main+0xe0>
     4ec:	00 c0       	rjmp	.+0      	; 0x4ee <main+0xea>
     4ee:	00 00       	nop
     4f0:	6d 2d       	mov	r22, r13
     4f2:	8e e1       	ldi	r24, 0x1E	; 30
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN9StatusLed8setColorENS_9ledColorsE>
     4fa:	6e 2d       	mov	r22, r14
     4fc:	87 e2       	ldi	r24, 0x27	; 39
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN9StatusLed8setColorENS_9ledColorsE>
     504:	6f 2d       	mov	r22, r15
     506:	80 e3       	ldi	r24, 0x30	; 48
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN9StatusLed8setColorENS_9ledColorsE>
     50e:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     512:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	78 2b       	or	r23, r24
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	0e 94 9f 08 	call	0x113e	; 0x113e <__floatunsisf>
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	40 e8       	ldi	r20, 0x80	; 128
     528:	5a e3       	ldi	r21, 0x3A	; 58
     52a:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	40 ea       	ldi	r20, 0xA0	; 160
     534:	50 e4       	ldi	r21, 0x40	; 64
     536:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
     53a:	23 e0       	ldi	r18, 0x03	; 3
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	40 ef       	ldi	r20, 0xF0	; 240
     540:	50 e4       	ldi	r21, 0x40	; 64
     542:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
     546:	22 e0       	ldi	r18, 0x02	; 2
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	4c ea       	ldi	r20, 0xAC	; 172
     54c:	51 e4       	ldi	r21, 0x41	; 65
     54e:	0e 94 85 07 	call	0xf0a	; 0xf0a <__subsf3>
     552:	0e 94 16 0a 	call	0x142c	; 0x142c <round>
     556:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__fixsfsi>
     55a:	ce 01       	movw	r24, r28
     55c:	01 96       	adiw	r24, 0x01	; 1
     55e:	0e 94 54 00 	call	0xa8	; 0xa8 <_ZN8Bargraph8setValueEs>
     562:	2f ef       	ldi	r18, 0xFF	; 255
     564:	83 ed       	ldi	r24, 0xD3	; 211
     566:	90 e3       	ldi	r25, 0x30	; 48
     568:	21 50       	subi	r18, 0x01	; 1
     56a:	80 40       	sbci	r24, 0x00	; 0
     56c:	90 40       	sbci	r25, 0x00	; 0
     56e:	e1 f7       	brne	.-8      	; 0x568 <main+0x164>
     570:	00 c0       	rjmp	.+0      	; 0x572 <main+0x16e>
     572:	00 00       	nop
     574:	60 e0       	ldi	r22, 0x00	; 0
     576:	70 e0       	ldi	r23, 0x00	; 0
     578:	ce 01       	movw	r24, r28
     57a:	01 96       	adiw	r24, 0x01	; 1
     57c:	0e 94 54 00 	call	0xa8	; 0xa8 <_ZN8Bargraph8setValueEs>
     580:	2f ef       	ldi	r18, 0xFF	; 255
     582:	89 e6       	ldi	r24, 0x69	; 105
     584:	98 e1       	ldi	r25, 0x18	; 24
     586:	21 50       	subi	r18, 0x01	; 1
     588:	80 40       	sbci	r24, 0x00	; 0
     58a:	90 40       	sbci	r25, 0x00	; 0
     58c:	e1 f7       	brne	.-8      	; 0x586 <main+0x182>
     58e:	00 c0       	rjmp	.+0      	; 0x590 <main+0x18c>
     590:	00 00       	nop
     592:	8a b1       	in	r24, 0x0a	; 10
     594:	8f 73       	andi	r24, 0x3F	; 63
     596:	8a b9       	out	0x0a, r24	; 10
     598:	8b b1       	in	r24, 0x0b	; 11
     59a:	80 6c       	ori	r24, 0xC0	; 192
     59c:	8b b9       	out	0x0b, r24	; 11
     59e:	e8 e6       	ldi	r30, 0x68	; 104
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	80 81       	ld	r24, Z
     5a4:	82 60       	ori	r24, 0x02	; 2
     5a6:	80 83       	st	Z, r24
     5a8:	ec e6       	ldi	r30, 0x6C	; 108
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	80 81       	ld	r24, Z
     5ae:	8e 60       	ori	r24, 0x0E	; 14
     5b0:	80 83       	st	Z, r24
     5b2:	78 94       	sei
     5b4:	ce 01       	movw	r24, r28
     5b6:	03 96       	adiw	r24, 0x03	; 3
     5b8:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN8Ohmmeter14getMeasurementEv>
     5bc:	6b 01       	movw	r12, r22
     5be:	7c 01       	movw	r14, r24
     5c0:	4f 9b       	sbis	0x09, 7	; 9
     5c2:	3e c0       	rjmp	.+124    	; 0x640 <main+0x23c>
     5c4:	20 e0       	ldi	r18, 0x00	; 0
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	a9 01       	movw	r20, r18
     5ca:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__cmpsf2>
     5ce:	88 23       	and	r24, r24
     5d0:	81 f1       	breq	.+96     	; 0x632 <main+0x22e>
     5d2:	4e 9b       	sbis	0x09, 6	; 9
     5d4:	17 c0       	rjmp	.+46     	; 0x604 <main+0x200>
     5d6:	20 e0       	ldi	r18, 0x00	; 0
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	40 e6       	ldi	r20, 0x60	; 96
     5dc:	50 e4       	ldi	r21, 0x40	; 64
     5de:	c7 01       	movw	r24, r14
     5e0:	b6 01       	movw	r22, r12
     5e2:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
     5e6:	20 e0       	ldi	r18, 0x00	; 0
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	40 e8       	ldi	r20, 0x80	; 128
     5ec:	5f e3       	ldi	r21, 0x3F	; 63
     5ee:	0e 94 86 07 	call	0xf0c	; 0xf0c <__addsf3>
     5f2:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <floor>
     5f6:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__fixsfsi>
     5fa:	ce 01       	movw	r24, r28
     5fc:	01 96       	adiw	r24, 0x01	; 1
     5fe:	0e 94 54 00 	call	0xa8	; 0xa8 <_ZN8Bargraph8setValueEs>
     602:	d8 cf       	rjmp	.-80     	; 0x5b4 <main+0x1b0>
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	40 ee       	ldi	r20, 0xE0	; 224
     60a:	50 e4       	ldi	r21, 0x40	; 64
     60c:	c7 01       	movw	r24, r14
     60e:	b6 01       	movw	r22, r12
     610:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	40 e8       	ldi	r20, 0x80	; 128
     61a:	5f e3       	ldi	r21, 0x3F	; 63
     61c:	0e 94 86 07 	call	0xf0c	; 0xf0c <__addsf3>
     620:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <floor>
     624:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__fixsfsi>
     628:	ce 01       	movw	r24, r28
     62a:	01 96       	adiw	r24, 0x01	; 1
     62c:	0e 94 54 00 	call	0xa8	; 0xa8 <_ZN8Bargraph8setValueEs>
     630:	c1 cf       	rjmp	.-126    	; 0x5b4 <main+0x1b0>
     632:	6f ef       	ldi	r22, 0xFF	; 255
     634:	7f ef       	ldi	r23, 0xFF	; 255
     636:	ce 01       	movw	r24, r28
     638:	01 96       	adiw	r24, 0x01	; 1
     63a:	0e 94 54 00 	call	0xa8	; 0xa8 <_ZN8Bargraph8setValueEs>
     63e:	ba cf       	rjmp	.-140    	; 0x5b4 <main+0x1b0>
     640:	6f ef       	ldi	r22, 0xFF	; 255
     642:	7f ef       	ldi	r23, 0xFF	; 255
     644:	ce 01       	movw	r24, r28
     646:	01 96       	adiw	r24, 0x01	; 1
     648:	0e 94 54 00 	call	0xa8	; 0xa8 <_ZN8Bargraph8setValueEs>
     64c:	b3 cf       	rjmp	.-154    	; 0x5b4 <main+0x1b0>

0000064e <_GLOBAL__sub_I_ledCh3>:
     64e:	8f 92       	push	r8
     650:	9f 92       	push	r9
     652:	af 92       	push	r10
     654:	bf 92       	push	r11
     656:	cf 92       	push	r12
     658:	df 92       	push	r13
     65a:	ef 92       	push	r14
     65c:	ff 92       	push	r15
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
#include "Monitor.h"

float remap(float in, float min_in, float max_in, float min_out, float max_out);

/* Creating LEDs for the 3 channels */
StatusLed ledCh3 = StatusLed(&PORTB, PORTB0, &PORTB, PORTB1);
     662:	01 e0       	ldi	r16, 0x01	; 1
     664:	10 e0       	ldi	r17, 0x00	; 0
     666:	25 e2       	ldi	r18, 0x25	; 37
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	40 e0       	ldi	r20, 0x00	; 0
     66c:	50 e0       	ldi	r21, 0x00	; 0
     66e:	65 e2       	ldi	r22, 0x25	; 37
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	80 e3       	ldi	r24, 0x30	; 48
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	0e 94 58 07 	call	0xeb0	; 0xeb0 <_ZN9StatusLedC1EPVhiS1_i>
StatusLed ledCh2 = StatusLed(&PORTB, PORTB2, &PORTB, PORTB3);
     67a:	03 e0       	ldi	r16, 0x03	; 3
     67c:	10 e0       	ldi	r17, 0x00	; 0
     67e:	25 e2       	ldi	r18, 0x25	; 37
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	42 e0       	ldi	r20, 0x02	; 2
     684:	50 e0       	ldi	r21, 0x00	; 0
     686:	65 e2       	ldi	r22, 0x25	; 37
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	87 e2       	ldi	r24, 0x27	; 39
     68c:	91 e0       	ldi	r25, 0x01	; 1
     68e:	0e 94 58 07 	call	0xeb0	; 0xeb0 <_ZN9StatusLedC1EPVhiS1_i>
StatusLed ledCh1 = StatusLed(&PORTB, PORTB4, &PORTB, PORTB5);
     692:	05 e0       	ldi	r16, 0x05	; 5
     694:	10 e0       	ldi	r17, 0x00	; 0
     696:	25 e2       	ldi	r18, 0x25	; 37
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	44 e0       	ldi	r20, 0x04	; 4
     69c:	50 e0       	ldi	r21, 0x00	; 0
     69e:	65 e2       	ldi	r22, 0x25	; 37
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	8e e1       	ldi	r24, 0x1E	; 30
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	0e 94 58 07 	call	0xeb0	; 0xeb0 <_ZN9StatusLedC1EPVhiS1_i>

/*Creating the monitor*/
Monitor mon = Monitor(&ledCh1, &PORTC, PORTC1, \
     6aa:	1f 92       	push	r1
     6ac:	83 e0       	ldi	r24, 0x03	; 3
     6ae:	8f 93       	push	r24
     6b0:	0f 2e       	mov	r0, r31
     6b2:	f8 e2       	ldi	r31, 0x28	; 40
     6b4:	8f 2e       	mov	r8, r31
     6b6:	91 2c       	mov	r9, r1
     6b8:	f0 2d       	mov	r31, r0
     6ba:	0f 2e       	mov	r0, r31
     6bc:	f0 e3       	ldi	r31, 0x30	; 48
     6be:	af 2e       	mov	r10, r31
     6c0:	f1 e0       	ldi	r31, 0x01	; 1
     6c2:	bf 2e       	mov	r11, r31
     6c4:	f0 2d       	mov	r31, r0
     6c6:	68 94       	set
     6c8:	cc 24       	eor	r12, r12
     6ca:	c1 f8       	bld	r12, 1
     6cc:	d1 2c       	mov	r13, r1
     6ce:	0f 2e       	mov	r0, r31
     6d0:	f8 e2       	ldi	r31, 0x28	; 40
     6d2:	ef 2e       	mov	r14, r31
     6d4:	f1 2c       	mov	r15, r1
     6d6:	f0 2d       	mov	r31, r0
     6d8:	07 e2       	ldi	r16, 0x27	; 39
     6da:	11 e0       	ldi	r17, 0x01	; 1
     6dc:	21 e0       	ldi	r18, 0x01	; 1
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	48 e2       	ldi	r20, 0x28	; 40
     6e2:	50 e0       	ldi	r21, 0x00	; 0
     6e4:	6e e1       	ldi	r22, 0x1E	; 30
     6e6:	71 e0       	ldi	r23, 0x01	; 1
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	91 e0       	ldi	r25, 0x01	; 1
     6ec:	0e 94 85 03 	call	0x70a	; 0x70a <_ZN7MonitorC1EP9StatusLedPVhiS1_S3_iS1_S3_i>
float remap (float in, float min_in, float max_in, float min_out, float max_out){
	float alpha = (min_out - max_out)/(min_in - max_in);
	float beta = max_out - alpha * max_in;
	
	return alpha*in + beta;
}
     6f0:	0f 90       	pop	r0
     6f2:	0f 90       	pop	r0
     6f4:	1f 91       	pop	r17
     6f6:	0f 91       	pop	r16
     6f8:	ff 90       	pop	r15
     6fa:	ef 90       	pop	r14
     6fc:	df 90       	pop	r13
     6fe:	cf 90       	pop	r12
     700:	bf 90       	pop	r11
     702:	af 90       	pop	r10
     704:	9f 90       	pop	r9
     706:	8f 90       	pop	r8
     708:	08 95       	ret

0000070a <_ZN7MonitorC1EP9StatusLedPVhiS1_S3_iS1_S3_i>:
ï»¿#include <avr/interrupt.h>
#include "Monitor.h"
#include "timers.h"

Monitor::Monitor(StatusLed *led1, volatile uint8_t *portChan1, int pinChan1, \
     70a:	6f 92       	push	r6
     70c:	7f 92       	push	r7
     70e:	8f 92       	push	r8
     710:	9f 92       	push	r9
     712:	af 92       	push	r10
     714:	bf 92       	push	r11
     716:	cf 92       	push	r12
     718:	df 92       	push	r13
     71a:	ef 92       	push	r14
     71c:	ff 92       	push	r15
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
     72a:	3c 01       	movw	r6, r24
				  StatusLed *led2, volatile uint8_t *portChan2, int pinChan2, \
				   StatusLed *led3, volatile uint8_t *portChan3, int pinChan3){
	l1 = led1;
     72c:	dc 01       	movw	r26, r24
     72e:	14 96       	adiw	r26, 0x04	; 4
     730:	7c 93       	st	X, r23
     732:	6e 93       	st	-X, r22
     734:	13 97       	sbiw	r26, 0x03	; 3
	l2 = led2;
     736:	16 96       	adiw	r26, 0x06	; 6
     738:	1c 93       	st	X, r17
     73a:	0e 93       	st	-X, r16
     73c:	15 97       	sbiw	r26, 0x05	; 5
	l3 = led3;
     73e:	18 96       	adiw	r26, 0x08	; 8
     740:	bc 92       	st	X, r11
     742:	ae 92       	st	-X, r10
     744:	17 97       	sbiw	r26, 0x07	; 7
	
	portCh1 = portChan1;
     746:	19 96       	adiw	r26, 0x09	; 9
     748:	4c 93       	st	X, r20
     74a:	19 97       	sbiw	r26, 0x09	; 9
     74c:	1a 96       	adiw	r26, 0x0a	; 10
     74e:	5c 93       	st	X, r21
     750:	1a 97       	sbiw	r26, 0x0a	; 10
	pinCh1 = pinChan1;
     752:	1f 96       	adiw	r26, 0x0f	; 15
     754:	2c 93       	st	X, r18
     756:	1f 97       	sbiw	r26, 0x0f	; 15
     758:	50 96       	adiw	r26, 0x10	; 16
     75a:	3c 93       	st	X, r19
     75c:	50 97       	sbiw	r26, 0x10	; 16
	
	portCh2 = portChan2;
     75e:	1b 96       	adiw	r26, 0x0b	; 11
     760:	ec 92       	st	X, r14
     762:	1b 97       	sbiw	r26, 0x0b	; 11
     764:	1c 96       	adiw	r26, 0x0c	; 12
     766:	fc 92       	st	X, r15
     768:	1c 97       	sbiw	r26, 0x0c	; 12
	pinCh2 = pinChan2;
     76a:	52 96       	adiw	r26, 0x12	; 18
     76c:	dc 92       	st	X, r13
     76e:	ce 92       	st	-X, r12
     770:	51 97       	sbiw	r26, 0x11	; 17
	
	portCh3 = portChan3;
     772:	1d 96       	adiw	r26, 0x0d	; 13
     774:	8c 92       	st	X, r8
     776:	1d 97       	sbiw	r26, 0x0d	; 13
     778:	1e 96       	adiw	r26, 0x0e	; 14
     77a:	9c 92       	st	X, r9
     77c:	1e 97       	sbiw	r26, 0x0e	; 14
	pinCh3 = pinChan3;
     77e:	89 89       	ldd	r24, Y+17	; 0x11
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	54 96       	adiw	r26, 0x14	; 20
     784:	9c 93       	st	X, r25
     786:	8e 93       	st	-X, r24
     788:	53 97       	sbiw	r26, 0x13	; 19

	/* Sets the listening pins as inputs*/
	*(portChan1-1) &= ~(1 << pinCh1);
     78a:	e4 2f       	mov	r30, r20
     78c:	f5 2f       	mov	r31, r21
     78e:	32 91       	ld	r19, -Z
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	ac 01       	movw	r20, r24
     796:	02 c0       	rjmp	.+4      	; 0x79c <_ZN7MonitorC1EP9StatusLedPVhiS1_S3_iS1_S3_i+0x92>
     798:	44 0f       	add	r20, r20
     79a:	55 1f       	adc	r21, r21
     79c:	2a 95       	dec	r18
     79e:	e2 f7       	brpl	.-8      	; 0x798 <_ZN7MonitorC1EP9StatusLedPVhiS1_S3_iS1_S3_i+0x8e>
     7a0:	24 2f       	mov	r18, r20
     7a2:	20 95       	com	r18
     7a4:	23 23       	and	r18, r19
     7a6:	20 83       	st	Z, r18
	*(portChan2-1) &= ~(1 << pinCh2);
     7a8:	ee 2d       	mov	r30, r14
     7aa:	ff 2d       	mov	r31, r15
     7ac:	32 91       	ld	r19, -Z
     7ae:	ac 01       	movw	r20, r24
     7b0:	51 96       	adiw	r26, 0x11	; 17
     7b2:	0c 90       	ld	r0, X
     7b4:	51 97       	sbiw	r26, 0x11	; 17
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <_ZN7MonitorC1EP9StatusLedPVhiS1_S3_iS1_S3_i+0xb2>
     7b8:	44 0f       	add	r20, r20
     7ba:	55 1f       	adc	r21, r21
     7bc:	0a 94       	dec	r0
     7be:	e2 f7       	brpl	.-8      	; 0x7b8 <_ZN7MonitorC1EP9StatusLedPVhiS1_S3_iS1_S3_i+0xae>
     7c0:	24 2f       	mov	r18, r20
     7c2:	20 95       	com	r18
     7c4:	23 23       	and	r18, r19
     7c6:	20 83       	st	Z, r18
	*(portChan3-1) &= ~(1 << pinCh3);
     7c8:	e8 2d       	mov	r30, r8
     7ca:	f9 2d       	mov	r31, r9
     7cc:	22 91       	ld	r18, -Z
     7ce:	53 96       	adiw	r26, 0x13	; 19
     7d0:	0c 90       	ld	r0, X
     7d2:	53 97       	sbiw	r26, 0x13	; 19
     7d4:	02 c0       	rjmp	.+4      	; 0x7da <_ZN7MonitorC1EP9StatusLedPVhiS1_S3_iS1_S3_i+0xd0>
     7d6:	88 0f       	add	r24, r24
     7d8:	99 1f       	adc	r25, r25
     7da:	0a 94       	dec	r0
     7dc:	e2 f7       	brpl	.-8      	; 0x7d6 <_ZN7MonitorC1EP9StatusLedPVhiS1_S3_iS1_S3_i+0xcc>
     7de:	80 95       	com	r24
     7e0:	82 23       	and	r24, r18
     7e2:	80 83       	st	Z, r24
	
	/* Sets the levels */
	unsigned char sreg;
	sreg = SREG;
     7e4:	1f b7       	in	r17, 0x3f	; 63
	cli();
     7e6:	f8 94       	cli
	
	if( ( *(portCh1-2) & (1 << pinCh1) ) != 0){
     7e8:	19 96       	adiw	r26, 0x09	; 9
     7ea:	ed 91       	ld	r30, X+
     7ec:	fc 91       	ld	r31, X
     7ee:	1a 97       	sbiw	r26, 0x0a	; 10
     7f0:	32 97       	sbiw	r30, 0x02	; 2
     7f2:	80 81       	ld	r24, Z
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	1f 96       	adiw	r26, 0x0f	; 15
     7f8:	0c 90       	ld	r0, X
     7fa:	1f 97       	sbiw	r26, 0x0f	; 15
     7fc:	02 c0       	rjmp	.+4      	; 0x802 <_ZN7MonitorC1EP9StatusLedPVhiS1_S3_iS1_S3_i+0xf8>
     7fe:	95 95       	asr	r25
     800:	87 95       	ror	r24
     802:	0a 94       	dec	r0
     804:	e2 f7       	brpl	.-8      	; 0x7fe <_ZN7MonitorC1EP9StatusLedPVhiS1_S3_iS1_S3_i+0xf4>
     806:	80 ff       	sbrs	r24, 0
     808:	0d c0       	rjmp	.+26     	; 0x824 <_ZN7MonitorC1EP9StatusLedPVhiS1_S3_iS1_S3_i+0x11a>
		levelCh1 = HIGH;
     80a:	55 96       	adiw	r26, 0x15	; 21
     80c:	1c 92       	st	X, r1
     80e:	55 97       	sbiw	r26, 0x15	; 21
		stateM_1 = Monitor::OFF;
     810:	82 e0       	ldi	r24, 0x02	; 2
     812:	8c 93       	st	X, r24
		l1->setColor(StatusLed::OFF);
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	13 96       	adiw	r26, 0x03	; 3
     818:	8d 91       	ld	r24, X+
     81a:	9c 91       	ld	r25, X
     81c:	14 97       	sbiw	r26, 0x04	; 4
     81e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN9StatusLed8setColorENS_9ledColorsE>
     822:	09 c0       	rjmp	.+18     	; 0x836 <_ZN7MonitorC1EP9StatusLedPVhiS1_S3_iS1_S3_i+0x12c>

	}else{
		levelCh1 = LOW;
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	f3 01       	movw	r30, r6
     828:	85 8b       	std	Z+21, r24	; 0x15
		stateM_1 = Monitor::GREEN;
     82a:	80 83       	st	Z, r24
		l1->setColor(StatusLed::GREEN);
     82c:	62 e0       	ldi	r22, 0x02	; 2
     82e:	83 81       	ldd	r24, Z+3	; 0x03
     830:	94 81       	ldd	r25, Z+4	; 0x04
     832:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN9StatusLed8setColorENS_9ledColorsE>
	}
	
	if( ( *(portCh2-2) & (1 << pinCh2) ) != 0){
     836:	d3 01       	movw	r26, r6
     838:	1b 96       	adiw	r26, 0x0b	; 11
     83a:	ed 91       	ld	r30, X+
     83c:	fc 91       	ld	r31, X
     83e:	1c 97       	sbiw	r26, 0x0c	; 12
     840:	32 97       	sbiw	r30, 0x02	; 2
     842:	80 81       	ld	r24, Z
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	51 96       	adiw	r26, 0x11	; 17
     848:	0c 90       	ld	r0, X
     84a:	51 97       	sbiw	r26, 0x11	; 17
     84c:	02 c0       	rjmp	.+4      	; 0x852 <_ZN7MonitorC1EP9StatusLedPVhiS1_S3_iS1_S3_i+0x148>
     84e:	95 95       	asr	r25
     850:	87 95       	ror	r24
     852:	0a 94       	dec	r0
     854:	e2 f7       	brpl	.-8      	; 0x84e <_ZN7MonitorC1EP9StatusLedPVhiS1_S3_iS1_S3_i+0x144>
     856:	80 ff       	sbrs	r24, 0
     858:	0f c0       	rjmp	.+30     	; 0x878 <_ZN7MonitorC1EP9StatusLedPVhiS1_S3_iS1_S3_i+0x16e>
		levelCh2 = HIGH;
     85a:	56 96       	adiw	r26, 0x16	; 22
     85c:	1c 92       	st	X, r1
     85e:	56 97       	sbiw	r26, 0x16	; 22
		stateM_2 = Monitor::OFF;
     860:	82 e0       	ldi	r24, 0x02	; 2
     862:	11 96       	adiw	r26, 0x01	; 1
     864:	8c 93       	st	X, r24
     866:	11 97       	sbiw	r26, 0x01	; 1
		l2->setColor(StatusLed::OFF);
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	15 96       	adiw	r26, 0x05	; 5
     86c:	8d 91       	ld	r24, X+
     86e:	9c 91       	ld	r25, X
     870:	16 97       	sbiw	r26, 0x06	; 6
     872:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN9StatusLed8setColorENS_9ledColorsE>
     876:	09 c0       	rjmp	.+18     	; 0x88a <_ZN7MonitorC1EP9StatusLedPVhiS1_S3_iS1_S3_i+0x180>
	}else{
		levelCh2 = LOW;
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	f3 01       	movw	r30, r6
     87c:	86 8b       	std	Z+22, r24	; 0x16
		stateM_2 = Monitor::GREEN;
     87e:	81 83       	std	Z+1, r24	; 0x01
		l2->setColor(StatusLed::GREEN);
     880:	62 e0       	ldi	r22, 0x02	; 2
     882:	85 81       	ldd	r24, Z+5	; 0x05
     884:	96 81       	ldd	r25, Z+6	; 0x06
     886:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN9StatusLed8setColorENS_9ledColorsE>
	}
	
	if( ( *(portCh3-2) & (1 << pinCh3) ) != 0){
     88a:	d3 01       	movw	r26, r6
     88c:	1d 96       	adiw	r26, 0x0d	; 13
     88e:	ed 91       	ld	r30, X+
     890:	fc 91       	ld	r31, X
     892:	1e 97       	sbiw	r26, 0x0e	; 14
     894:	32 97       	sbiw	r30, 0x02	; 2
     896:	80 81       	ld	r24, Z
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	53 96       	adiw	r26, 0x13	; 19
     89c:	0c 90       	ld	r0, X
     89e:	53 97       	sbiw	r26, 0x13	; 19
     8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <_ZN7MonitorC1EP9StatusLedPVhiS1_S3_iS1_S3_i+0x19c>
     8a2:	95 95       	asr	r25
     8a4:	87 95       	ror	r24
     8a6:	0a 94       	dec	r0
     8a8:	e2 f7       	brpl	.-8      	; 0x8a2 <_ZN7MonitorC1EP9StatusLedPVhiS1_S3_iS1_S3_i+0x198>
     8aa:	80 ff       	sbrs	r24, 0
     8ac:	0f c0       	rjmp	.+30     	; 0x8cc <_ZN7MonitorC1EP9StatusLedPVhiS1_S3_iS1_S3_i+0x1c2>
		levelCh3 = HIGH;
     8ae:	57 96       	adiw	r26, 0x17	; 23
     8b0:	1c 92       	st	X, r1
     8b2:	57 97       	sbiw	r26, 0x17	; 23
		stateM_3 = Monitor::OFF;
     8b4:	82 e0       	ldi	r24, 0x02	; 2
     8b6:	12 96       	adiw	r26, 0x02	; 2
     8b8:	8c 93       	st	X, r24
     8ba:	12 97       	sbiw	r26, 0x02	; 2
		l3->setColor(StatusLed::OFF);
     8bc:	60 e0       	ldi	r22, 0x00	; 0
     8be:	17 96       	adiw	r26, 0x07	; 7
     8c0:	8d 91       	ld	r24, X+
     8c2:	9c 91       	ld	r25, X
     8c4:	18 97       	sbiw	r26, 0x08	; 8
     8c6:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN9StatusLed8setColorENS_9ledColorsE>
     8ca:	09 c0       	rjmp	.+18     	; 0x8de <_ZN7MonitorC1EP9StatusLedPVhiS1_S3_iS1_S3_i+0x1d4>
	}else{
		levelCh3 = LOW;
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	f3 01       	movw	r30, r6
     8d0:	87 8b       	std	Z+23, r24	; 0x17
		stateM_3 = Monitor::GREEN;
     8d2:	82 83       	std	Z+2, r24	; 0x02
		l3->setColor(StatusLed::GREEN);
     8d4:	62 e0       	ldi	r22, 0x02	; 2
     8d6:	87 81       	ldd	r24, Z+7	; 0x07
     8d8:	90 85       	ldd	r25, Z+8	; 0x08
     8da:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN9StatusLed8setColorENS_9ledColorsE>
	}
	
	//Sets the timers
	set_timer0();
     8de:	0e 94 cb 00 	call	0x196	; 0x196 <_Z10set_timer0v>
	set_timer1();
     8e2:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_Z10set_timer1v>
	set_timer2();
     8e6:	0e 94 33 01 	call	0x266	; 0x266 <_Z10set_timer2v>
	
	timeoffCounter_1 = timeoffCounter_2 = timeoffCounter_3 = 0;
     8ea:	d3 01       	movw	r26, r6
     8ec:	5d 96       	adiw	r26, 0x1d	; 29
     8ee:	1c 92       	st	X, r1
     8f0:	1e 92       	st	-X, r1
     8f2:	5c 97       	sbiw	r26, 0x1c	; 28
     8f4:	5b 96       	adiw	r26, 0x1b	; 27
     8f6:	1c 92       	st	X, r1
     8f8:	1e 92       	st	-X, r1
     8fa:	5a 97       	sbiw	r26, 0x1a	; 26
     8fc:	59 96       	adiw	r26, 0x19	; 25
     8fe:	1c 92       	st	X, r1
     900:	1e 92       	st	-X, r1
     902:	58 97       	sbiw	r26, 0x18	; 24
	SREG = sreg;
     904:	1f bf       	out	0x3f, r17	; 63
}
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	1f 91       	pop	r17
     90c:	0f 91       	pop	r16
     90e:	ff 90       	pop	r15
     910:	ef 90       	pop	r14
     912:	df 90       	pop	r13
     914:	cf 90       	pop	r12
     916:	bf 90       	pop	r11
     918:	af 90       	pop	r10
     91a:	9f 90       	pop	r9
     91c:	8f 90       	pop	r8
     91e:	7f 90       	pop	r7
     920:	6f 90       	pop	r6
     922:	08 95       	ret

00000924 <_ZN7Monitor17interrupt_routineEv>:

void Monitor::interrupt_routine(){
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	ec 01       	movw	r28, r24
	
	//Channel 1 (AA')
	if( ( ( *(portCh1-2) & (1 << pinCh1) ) != 0) && levelCh1 ==  LOW){
     92a:	29 85       	ldd	r18, Y+9	; 0x09
     92c:	3a 85       	ldd	r19, Y+10	; 0x0a
     92e:	f9 01       	movw	r30, r18
     930:	32 97       	sbiw	r30, 0x02	; 2
     932:	80 81       	ld	r24, Z
     934:	4f 85       	ldd	r20, Y+15	; 0x0f
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	04 2e       	mov	r0, r20
     93a:	02 c0       	rjmp	.+4      	; 0x940 <_ZN7Monitor17interrupt_routineEv+0x1c>
     93c:	95 95       	asr	r25
     93e:	87 95       	ror	r24
     940:	0a 94       	dec	r0
     942:	e2 f7       	brpl	.-8      	; 0x93c <_ZN7Monitor17interrupt_routineEv+0x18>
     944:	80 ff       	sbrs	r24, 0
     946:	96 c0       	rjmp	.+300    	; 0xa74 <_ZN7Monitor17interrupt_routineEv+0x150>
     948:	8d 89       	ldd	r24, Y+21	; 0x15
     94a:	81 30       	cpi	r24, 0x01	; 1
     94c:	09 f0       	breq	.+2      	; 0x950 <_ZN7Monitor17interrupt_routineEv+0x2c>
     94e:	92 c0       	rjmp	.+292    	; 0xa74 <_ZN7Monitor17interrupt_routineEv+0x150>
     950:	9d c0       	rjmp	.+314    	; 0xa8c <_ZN7Monitor17interrupt_routineEv+0x168>
		//RISING_EDGE = wire disconnected
		levelCh1 = HIGH;
		
		if(stateM_1 == GREEN){
			enable_timer0();
     952:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <_Z13enable_timer0v>
     956:	1f c0       	rjmp	.+62     	; 0x996 <_ZN7Monitor17interrupt_routineEv+0x72>
		}else if(stateM_1 == RED){
     958:	81 11       	cpse	r24, r1
     95a:	03 c0       	rjmp	.+6      	; 0x962 <_ZN7Monitor17interrupt_routineEv+0x3e>
			enable_timer0();
     95c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <_Z13enable_timer0v>
     960:	1a c0       	rjmp	.+52     	; 0x996 <_ZN7Monitor17interrupt_routineEv+0x72>
		}else if(stateM_1 == OFF){
     962:	82 30       	cpi	r24, 0x02	; 2
     964:	c1 f4       	brne	.+48     	; 0x996 <_ZN7Monitor17interrupt_routineEv+0x72>
			disable_timer0();
     966:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z14disable_timer0v>
     96a:	15 c0       	rjmp	.+42     	; 0x996 <_ZN7Monitor17interrupt_routineEv+0x72>
		}
		
	}else if( ( ( *(portCh1-2) & (1 << pinCh1) ) == 0) && levelCh1 == HIGH){
     96c:	8d 89       	ldd	r24, Y+21	; 0x15
     96e:	88 23       	and	r24, r24
     970:	09 f4       	brne	.+2      	; 0x974 <_ZN7Monitor17interrupt_routineEv+0x50>
     972:	92 c0       	rjmp	.+292    	; 0xa98 <_ZN7Monitor17interrupt_routineEv+0x174>
     974:	10 c0       	rjmp	.+32     	; 0x996 <_ZN7Monitor17interrupt_routineEv+0x72>
		levelCh1 = LOW;
		
		if(stateM_1 == GREEN){
			//Interrupt less than 5 ms.
			//Disables the timer
			disable_timer0();
     976:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z14disable_timer0v>
     97a:	0d c0       	rjmp	.+26     	; 0x996 <_ZN7Monitor17interrupt_routineEv+0x72>
		}else if(stateM_1 == RED){
     97c:	81 11       	cpse	r24, r1
     97e:	05 c0       	rjmp	.+10     	; 0x98a <_ZN7Monitor17interrupt_routineEv+0x66>
			//resets the switch-to-off counter
			timeoffCounter_1 = 0;
     980:	19 8e       	std	Y+25, r1	; 0x19
     982:	18 8e       	std	Y+24, r1	; 0x18
			
			//Disable Timer
			disable_timer0();
     984:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z14disable_timer0v>
     988:	06 c0       	rjmp	.+12     	; 0x996 <_ZN7Monitor17interrupt_routineEv+0x72>
		}else if(stateM_1 == OFF){
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	21 f4       	brne	.+8      	; 0x996 <_ZN7Monitor17interrupt_routineEv+0x72>
			//enables timer (to count up to timeoffCounter = 100) before enabling counter
			timeoffCounter_1 = 0;
     98e:	19 8e       	std	Y+25, r1	; 0x19
     990:	18 8e       	std	Y+24, r1	; 0x18
			enable_timer0();
     992:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <_Z13enable_timer0v>
		
		}
	}
	
	//Channel 2 (BB')
	if( ( ( *(portCh2-2) & (1 << pinCh2) ) != 0) && levelCh2 ==  LOW){
     996:	2b 85       	ldd	r18, Y+11	; 0x0b
     998:	3c 85       	ldd	r19, Y+12	; 0x0c
     99a:	f9 01       	movw	r30, r18
     99c:	32 97       	sbiw	r30, 0x02	; 2
     99e:	80 81       	ld	r24, Z
     9a0:	49 89       	ldd	r20, Y+17	; 0x11
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	04 2e       	mov	r0, r20
     9a6:	02 c0       	rjmp	.+4      	; 0x9ac <_ZN7Monitor17interrupt_routineEv+0x88>
     9a8:	95 95       	asr	r25
     9aa:	87 95       	ror	r24
     9ac:	0a 94       	dec	r0
     9ae:	e2 f7       	brpl	.-8      	; 0x9a8 <_ZN7Monitor17interrupt_routineEv+0x84>
     9b0:	80 ff       	sbrs	r24, 0
     9b2:	79 c0       	rjmp	.+242    	; 0xaa6 <_ZN7Monitor17interrupt_routineEv+0x182>
     9b4:	8e 89       	ldd	r24, Y+22	; 0x16
     9b6:	81 30       	cpi	r24, 0x01	; 1
     9b8:	09 f0       	breq	.+2      	; 0x9bc <_ZN7Monitor17interrupt_routineEv+0x98>
     9ba:	75 c0       	rjmp	.+234    	; 0xaa6 <_ZN7Monitor17interrupt_routineEv+0x182>
     9bc:	80 c0       	rjmp	.+256    	; 0xabe <_ZN7Monitor17interrupt_routineEv+0x19a>
		//RISING_EDGE = wire disconnected
		levelCh2 = HIGH;
		
		if(stateM_2 == GREEN){
			enable_timer1();
     9be:	0e 94 20 01 	call	0x240	; 0x240 <_Z13enable_timer1v>
     9c2:	1f c0       	rjmp	.+62     	; 0xa02 <_ZN7Monitor17interrupt_routineEv+0xde>
		}else if(stateM_2 == RED){
     9c4:	81 11       	cpse	r24, r1
     9c6:	03 c0       	rjmp	.+6      	; 0x9ce <_ZN7Monitor17interrupt_routineEv+0xaa>
			enable_timer1();
     9c8:	0e 94 20 01 	call	0x240	; 0x240 <_Z13enable_timer1v>
     9cc:	1a c0       	rjmp	.+52     	; 0xa02 <_ZN7Monitor17interrupt_routineEv+0xde>
		}else if(stateM_2 == OFF){
     9ce:	82 30       	cpi	r24, 0x02	; 2
     9d0:	c1 f4       	brne	.+48     	; 0xa02 <_ZN7Monitor17interrupt_routineEv+0xde>
			disable_timer1();
     9d2:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z14disable_timer1v>
     9d6:	15 c0       	rjmp	.+42     	; 0xa02 <_ZN7Monitor17interrupt_routineEv+0xde>
		}

	}else if( ( ( *(portCh2-2) & (1 << pinCh2) ) == 0) && levelCh2 == HIGH){
     9d8:	8e 89       	ldd	r24, Y+22	; 0x16
     9da:	88 23       	and	r24, r24
     9dc:	09 f4       	brne	.+2      	; 0x9e0 <_ZN7Monitor17interrupt_routineEv+0xbc>
     9de:	75 c0       	rjmp	.+234    	; 0xaca <_ZN7Monitor17interrupt_routineEv+0x1a6>
     9e0:	10 c0       	rjmp	.+32     	; 0xa02 <_ZN7Monitor17interrupt_routineEv+0xde>
		levelCh2 = LOW;
		
		if(stateM_2 == GREEN){
			//Interrupt less than 5 ms.
			//Disables the timer
			disable_timer1();
     9e2:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z14disable_timer1v>
     9e6:	0d c0       	rjmp	.+26     	; 0xa02 <_ZN7Monitor17interrupt_routineEv+0xde>
		}else if(stateM_2 == RED){
     9e8:	81 11       	cpse	r24, r1
     9ea:	05 c0       	rjmp	.+10     	; 0x9f6 <_ZN7Monitor17interrupt_routineEv+0xd2>
			//resets the switch-to-off counter
			timeoffCounter_2 = 0;
     9ec:	1b 8e       	std	Y+27, r1	; 0x1b
     9ee:	1a 8e       	std	Y+26, r1	; 0x1a
			
			//Disable Timer
			disable_timer1();
     9f0:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z14disable_timer1v>
     9f4:	06 c0       	rjmp	.+12     	; 0xa02 <_ZN7Monitor17interrupt_routineEv+0xde>
		}else if(stateM_2 == OFF){
     9f6:	82 30       	cpi	r24, 0x02	; 2
     9f8:	21 f4       	brne	.+8      	; 0xa02 <_ZN7Monitor17interrupt_routineEv+0xde>
			//enables timer (to count up to timeoffCounter = 100) before enabling counter
			timeoffCounter_2 = 0;
     9fa:	1b 8e       	std	Y+27, r1	; 0x1b
     9fc:	1a 8e       	std	Y+26, r1	; 0x1a
			enable_timer1();	
     9fe:	0e 94 20 01 	call	0x240	; 0x240 <_Z13enable_timer1v>
		}
	}
	
	//Channel3 (CC')
	if( ( ( *(portCh3-2) & (1 << pinCh3) ) != 0) && levelCh3 ==  LOW){
     a02:	2d 85       	ldd	r18, Y+13	; 0x0d
     a04:	3e 85       	ldd	r19, Y+14	; 0x0e
     a06:	f9 01       	movw	r30, r18
     a08:	32 97       	sbiw	r30, 0x02	; 2
     a0a:	80 81       	ld	r24, Z
     a0c:	4b 89       	ldd	r20, Y+19	; 0x13
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	04 2e       	mov	r0, r20
     a12:	02 c0       	rjmp	.+4      	; 0xa18 <_ZN7Monitor17interrupt_routineEv+0xf4>
     a14:	95 95       	asr	r25
     a16:	87 95       	ror	r24
     a18:	0a 94       	dec	r0
     a1a:	e2 f7       	brpl	.-8      	; 0xa14 <_ZN7Monitor17interrupt_routineEv+0xf0>
     a1c:	80 ff       	sbrs	r24, 0
     a1e:	5c c0       	rjmp	.+184    	; 0xad8 <_ZN7Monitor17interrupt_routineEv+0x1b4>
     a20:	8f 89       	ldd	r24, Y+23	; 0x17
     a22:	81 30       	cpi	r24, 0x01	; 1
     a24:	09 f0       	breq	.+2      	; 0xa28 <_ZN7Monitor17interrupt_routineEv+0x104>
     a26:	58 c0       	rjmp	.+176    	; 0xad8 <_ZN7Monitor17interrupt_routineEv+0x1b4>
     a28:	63 c0       	rjmp	.+198    	; 0xaf0 <_ZN7Monitor17interrupt_routineEv+0x1cc>
		//RISING_EDGE = wire disconnected
		levelCh3 = HIGH;
		
		if(stateM_3 == GREEN){
			enable_timer2();
     a2a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_Z13enable_timer2v>
     a2e:	6d c0       	rjmp	.+218    	; 0xb0a <_ZN7Monitor17interrupt_routineEv+0x1e6>
		}else if(stateM_3 == RED){
     a30:	81 11       	cpse	r24, r1
     a32:	03 c0       	rjmp	.+6      	; 0xa3a <_ZN7Monitor17interrupt_routineEv+0x116>
			enable_timer2();
     a34:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_Z13enable_timer2v>
     a38:	68 c0       	rjmp	.+208    	; 0xb0a <_ZN7Monitor17interrupt_routineEv+0x1e6>
		}else if(stateM_3 == OFF){
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	09 f0       	breq	.+2      	; 0xa40 <_ZN7Monitor17interrupt_routineEv+0x11c>
     a3e:	65 c0       	rjmp	.+202    	; 0xb0a <_ZN7Monitor17interrupt_routineEv+0x1e6>
			disable_timer2();
     a40:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z14disable_timer2v>
     a44:	62 c0       	rjmp	.+196    	; 0xb0a <_ZN7Monitor17interrupt_routineEv+0x1e6>
		}

	}else if( ( ( *(portCh3-2) & (1 << pinCh3) ) == 0) && levelCh3 == HIGH){
     a46:	8f 89       	ldd	r24, Y+23	; 0x17
     a48:	88 23       	and	r24, r24
     a4a:	09 f4       	brne	.+2      	; 0xa4e <_ZN7Monitor17interrupt_routineEv+0x12a>
     a4c:	57 c0       	rjmp	.+174    	; 0xafc <_ZN7Monitor17interrupt_routineEv+0x1d8>
     a4e:	5d c0       	rjmp	.+186    	; 0xb0a <_ZN7Monitor17interrupt_routineEv+0x1e6>
		levelCh3 = LOW;
		
		if(stateM_3 == GREEN){
			//Interrupt less than 5 ms.
			//Disables the timer
			disable_timer2();
     a50:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z14disable_timer2v>
     a54:	5a c0       	rjmp	.+180    	; 0xb0a <_ZN7Monitor17interrupt_routineEv+0x1e6>
		}else if(stateM_3 == RED){
     a56:	81 11       	cpse	r24, r1
     a58:	05 c0       	rjmp	.+10     	; 0xa64 <_ZN7Monitor17interrupt_routineEv+0x140>
			//resets the switch-to-off counter
			timeoffCounter_3 = 0;
     a5a:	1d 8e       	std	Y+29, r1	; 0x1d
     a5c:	1c 8e       	std	Y+28, r1	; 0x1c
			
			//Disable Timer
			disable_timer2();
     a5e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z14disable_timer2v>
     a62:	53 c0       	rjmp	.+166    	; 0xb0a <_ZN7Monitor17interrupt_routineEv+0x1e6>
		}else if(stateM_3 == OFF){
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	09 f0       	breq	.+2      	; 0xa6a <_ZN7Monitor17interrupt_routineEv+0x146>
     a68:	50 c0       	rjmp	.+160    	; 0xb0a <_ZN7Monitor17interrupt_routineEv+0x1e6>
			//enables timer (to count up to timeoffCounter = 100) before enabling counter
			timeoffCounter_3 = 0;
     a6a:	1d 8e       	std	Y+29, r1	; 0x1d
     a6c:	1c 8e       	std	Y+28, r1	; 0x1c
			enable_timer2();
     a6e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_Z13enable_timer2v>
		}
	}

}
     a72:	4b c0       	rjmp	.+150    	; 0xb0a <_ZN7Monitor17interrupt_routineEv+0x1e6>
			enable_timer0();
		}else if(stateM_1 == OFF){
			disable_timer0();
		}
		
	}else if( ( ( *(portCh1-2) & (1 << pinCh1) ) == 0) && levelCh1 == HIGH){
     a74:	f9 01       	movw	r30, r18
     a76:	32 97       	sbiw	r30, 0x02	; 2
     a78:	80 81       	ld	r24, Z
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	02 c0       	rjmp	.+4      	; 0xa82 <_ZN7Monitor17interrupt_routineEv+0x15e>
     a7e:	95 95       	asr	r25
     a80:	87 95       	ror	r24
     a82:	4a 95       	dec	r20
     a84:	e2 f7       	brpl	.-8      	; 0xa7e <_ZN7Monitor17interrupt_routineEv+0x15a>
     a86:	80 ff       	sbrs	r24, 0
     a88:	71 cf       	rjmp	.-286    	; 0x96c <_ZN7Monitor17interrupt_routineEv+0x48>
     a8a:	85 cf       	rjmp	.-246    	; 0x996 <_ZN7Monitor17interrupt_routineEv+0x72>
void Monitor::interrupt_routine(){
	
	//Channel 1 (AA')
	if( ( ( *(portCh1-2) & (1 << pinCh1) ) != 0) && levelCh1 ==  LOW){
		//RISING_EDGE = wire disconnected
		levelCh1 = HIGH;
     a8c:	1d 8a       	std	Y+21, r1	; 0x15
		
		if(stateM_1 == GREEN){
     a8e:	88 81       	ld	r24, Y
     a90:	81 30       	cpi	r24, 0x01	; 1
     a92:	09 f0       	breq	.+2      	; 0xa96 <_ZN7Monitor17interrupt_routineEv+0x172>
     a94:	61 cf       	rjmp	.-318    	; 0x958 <_ZN7Monitor17interrupt_routineEv+0x34>
     a96:	5d cf       	rjmp	.-326    	; 0x952 <_ZN7Monitor17interrupt_routineEv+0x2e>
			disable_timer0();
		}
		
	}else if( ( ( *(portCh1-2) & (1 << pinCh1) ) == 0) && levelCh1 == HIGH){
		//FALLING EDGE = wire connected
		levelCh1 = LOW;
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	8d 8b       	std	Y+21, r24	; 0x15
		
		if(stateM_1 == GREEN){
     a9c:	88 81       	ld	r24, Y
     a9e:	81 30       	cpi	r24, 0x01	; 1
     aa0:	09 f0       	breq	.+2      	; 0xaa4 <_ZN7Monitor17interrupt_routineEv+0x180>
     aa2:	6c cf       	rjmp	.-296    	; 0x97c <_ZN7Monitor17interrupt_routineEv+0x58>
     aa4:	68 cf       	rjmp	.-304    	; 0x976 <_ZN7Monitor17interrupt_routineEv+0x52>
			enable_timer1();
		}else if(stateM_2 == OFF){
			disable_timer1();
		}

	}else if( ( ( *(portCh2-2) & (1 << pinCh2) ) == 0) && levelCh2 == HIGH){
     aa6:	f9 01       	movw	r30, r18
     aa8:	32 97       	sbiw	r30, 0x02	; 2
     aaa:	80 81       	ld	r24, Z
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	02 c0       	rjmp	.+4      	; 0xab4 <_ZN7Monitor17interrupt_routineEv+0x190>
     ab0:	95 95       	asr	r25
     ab2:	87 95       	ror	r24
     ab4:	4a 95       	dec	r20
     ab6:	e2 f7       	brpl	.-8      	; 0xab0 <_ZN7Monitor17interrupt_routineEv+0x18c>
     ab8:	80 ff       	sbrs	r24, 0
     aba:	8e cf       	rjmp	.-228    	; 0x9d8 <_ZN7Monitor17interrupt_routineEv+0xb4>
     abc:	a2 cf       	rjmp	.-188    	; 0xa02 <_ZN7Monitor17interrupt_routineEv+0xde>
	}
	
	//Channel 2 (BB')
	if( ( ( *(portCh2-2) & (1 << pinCh2) ) != 0) && levelCh2 ==  LOW){
		//RISING_EDGE = wire disconnected
		levelCh2 = HIGH;
     abe:	1e 8a       	std	Y+22, r1	; 0x16
		
		if(stateM_2 == GREEN){
     ac0:	89 81       	ldd	r24, Y+1	; 0x01
     ac2:	81 30       	cpi	r24, 0x01	; 1
     ac4:	09 f0       	breq	.+2      	; 0xac8 <_ZN7Monitor17interrupt_routineEv+0x1a4>
     ac6:	7e cf       	rjmp	.-260    	; 0x9c4 <_ZN7Monitor17interrupt_routineEv+0xa0>
     ac8:	7a cf       	rjmp	.-268    	; 0x9be <_ZN7Monitor17interrupt_routineEv+0x9a>
			disable_timer1();
		}

	}else if( ( ( *(portCh2-2) & (1 << pinCh2) ) == 0) && levelCh2 == HIGH){
		//FALLING EDGE = wire connected
		levelCh2 = LOW;
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	8e 8b       	std	Y+22, r24	; 0x16
		
		if(stateM_2 == GREEN){
     ace:	89 81       	ldd	r24, Y+1	; 0x01
     ad0:	81 30       	cpi	r24, 0x01	; 1
     ad2:	09 f0       	breq	.+2      	; 0xad6 <_ZN7Monitor17interrupt_routineEv+0x1b2>
     ad4:	89 cf       	rjmp	.-238    	; 0x9e8 <_ZN7Monitor17interrupt_routineEv+0xc4>
     ad6:	85 cf       	rjmp	.-246    	; 0x9e2 <_ZN7Monitor17interrupt_routineEv+0xbe>
			enable_timer2();
		}else if(stateM_3 == OFF){
			disable_timer2();
		}

	}else if( ( ( *(portCh3-2) & (1 << pinCh3) ) == 0) && levelCh3 == HIGH){
     ad8:	f9 01       	movw	r30, r18
     ada:	32 97       	sbiw	r30, 0x02	; 2
     adc:	80 81       	ld	r24, Z
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	02 c0       	rjmp	.+4      	; 0xae6 <_ZN7Monitor17interrupt_routineEv+0x1c2>
     ae2:	95 95       	asr	r25
     ae4:	87 95       	ror	r24
     ae6:	4a 95       	dec	r20
     ae8:	e2 f7       	brpl	.-8      	; 0xae2 <_ZN7Monitor17interrupt_routineEv+0x1be>
     aea:	80 ff       	sbrs	r24, 0
     aec:	ac cf       	rjmp	.-168    	; 0xa46 <_ZN7Monitor17interrupt_routineEv+0x122>
     aee:	0d c0       	rjmp	.+26     	; 0xb0a <_ZN7Monitor17interrupt_routineEv+0x1e6>
	}
	
	//Channel3 (CC')
	if( ( ( *(portCh3-2) & (1 << pinCh3) ) != 0) && levelCh3 ==  LOW){
		//RISING_EDGE = wire disconnected
		levelCh3 = HIGH;
     af0:	1f 8a       	std	Y+23, r1	; 0x17
		
		if(stateM_3 == GREEN){
     af2:	8a 81       	ldd	r24, Y+2	; 0x02
     af4:	81 30       	cpi	r24, 0x01	; 1
     af6:	09 f0       	breq	.+2      	; 0xafa <_ZN7Monitor17interrupt_routineEv+0x1d6>
     af8:	9b cf       	rjmp	.-202    	; 0xa30 <_ZN7Monitor17interrupt_routineEv+0x10c>
     afa:	97 cf       	rjmp	.-210    	; 0xa2a <_ZN7Monitor17interrupt_routineEv+0x106>
			disable_timer2();
		}

	}else if( ( ( *(portCh3-2) & (1 << pinCh3) ) == 0) && levelCh3 == HIGH){
		//FALLING EDGE = wire connected
		levelCh3 = LOW;
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	8f 8b       	std	Y+23, r24	; 0x17
		
		if(stateM_3 == GREEN){
     b00:	8a 81       	ldd	r24, Y+2	; 0x02
     b02:	81 30       	cpi	r24, 0x01	; 1
     b04:	09 f0       	breq	.+2      	; 0xb08 <_ZN7Monitor17interrupt_routineEv+0x1e4>
     b06:	a7 cf       	rjmp	.-178    	; 0xa56 <_ZN7Monitor17interrupt_routineEv+0x132>
     b08:	a3 cf       	rjmp	.-186    	; 0xa50 <_ZN7Monitor17interrupt_routineEv+0x12c>
			timeoffCounter_3 = 0;
			enable_timer2();
		}
	}

}
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	08 95       	ret

00000b10 <_ZN7Monitor16channel1_timeoutEv>:

void Monitor::channel1_timeout(){
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	ec 01       	movw	r28, r24
	//Signal was interrupted for more than 5ms for the first time. Lighting the led red
	if(stateM_1 == GREEN){
     b16:	88 81       	ld	r24, Y
     b18:	81 30       	cpi	r24, 0x01	; 1
     b1a:	41 f4       	brne	.+16     	; 0xb2c <_ZN7Monitor16channel1_timeoutEv+0x1c>
		stateM_1 = RED;
     b1c:	18 82       	st	Y, r1
		l1->setColor(StatusLed::RED);
     b1e:	61 e0       	ldi	r22, 0x01	; 1
     b20:	8b 81       	ldd	r24, Y+3	; 0x03
     b22:	9c 81       	ldd	r25, Y+4	; 0x04
     b24:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN9StatusLed8setColorENS_9ledColorsE>
		timeoffCounter_1 = 0;
     b28:	19 8e       	std	Y+25, r1	; 0x19
     b2a:	18 8e       	std	Y+24, r1	; 0x18
	}
	
	//Increments the counter of timeoffs
	timeoffCounter_1++;
     b2c:	88 8d       	ldd	r24, Y+24	; 0x18
     b2e:	99 8d       	ldd	r25, Y+25	; 0x19
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	99 8f       	std	Y+25, r25	; 0x19
     b34:	88 8f       	std	Y+24, r24	; 0x18
	
	if(timeoffCounter_1 >= 100 && stateM_1 == RED){ 
     b36:	88 8d       	ldd	r24, Y+24	; 0x18
     b38:	99 8d       	ldd	r25, Y+25	; 0x19
     b3a:	84 36       	cpi	r24, 0x64	; 100
     b3c:	91 05       	cpc	r25, r1
     b3e:	a4 f0       	brlt	.+40     	; 0xb68 <_ZN7Monitor16channel1_timeoutEv+0x58>
     b40:	88 81       	ld	r24, Y
     b42:	88 23       	and	r24, r24
     b44:	29 f0       	breq	.+10     	; 0xb50 <_ZN7Monitor16channel1_timeoutEv+0x40>
     b46:	10 c0       	rjmp	.+32     	; 0xb68 <_ZN7Monitor16channel1_timeoutEv+0x58>
		l1->setColor(StatusLed::OFF);
		timeoffCounter_1 = 0;
		
		//Disables Timer
		disable_timer0();
	}else if(timeoffCounter_1 >= 100 && stateM_1 == OFF){ 
     b48:	88 81       	ld	r24, Y
     b4a:	82 30       	cpi	r24, 0x02	; 2
     b4c:	f1 f4       	brne	.+60     	; 0xb8a <_ZN7Monitor16channel1_timeoutEv+0x7a>
     b4e:	12 c0       	rjmp	.+36     	; 0xb74 <_ZN7Monitor16channel1_timeoutEv+0x64>
	//Increments the counter of timeoffs
	timeoffCounter_1++;
	
	if(timeoffCounter_1 >= 100 && stateM_1 == RED){ 
		//Disconnected for more than 0.5s
		stateM_1 = OFF;
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	88 83       	st	Y, r24
		l1->setColor(StatusLed::OFF);
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	8b 81       	ldd	r24, Y+3	; 0x03
     b58:	9c 81       	ldd	r25, Y+4	; 0x04
     b5a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN9StatusLed8setColorENS_9ledColorsE>
		timeoffCounter_1 = 0;
     b5e:	19 8e       	std	Y+25, r1	; 0x19
     b60:	18 8e       	std	Y+24, r1	; 0x18
		
		//Disables Timer
		disable_timer0();
     b62:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z14disable_timer0v>
     b66:	11 c0       	rjmp	.+34     	; 0xb8a <_ZN7Monitor16channel1_timeoutEv+0x7a>
	}else if(timeoffCounter_1 >= 100 && stateM_1 == OFF){ 
     b68:	88 8d       	ldd	r24, Y+24	; 0x18
     b6a:	99 8d       	ldd	r25, Y+25	; 0x19
     b6c:	84 36       	cpi	r24, 0x64	; 100
     b6e:	91 05       	cpc	r25, r1
     b70:	5c f7       	brge	.-42     	; 0xb48 <_ZN7Monitor16channel1_timeoutEv+0x38>
     b72:	0b c0       	rjmp	.+22     	; 0xb8a <_ZN7Monitor16channel1_timeoutEv+0x7a>
		//Connected. Waited 0.5s before turning to green
		stateM_1 = GREEN;
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	88 83       	st	Y, r24
		l1->setColor(StatusLed::GREEN);
     b78:	62 e0       	ldi	r22, 0x02	; 2
     b7a:	8b 81       	ldd	r24, Y+3	; 0x03
     b7c:	9c 81       	ldd	r25, Y+4	; 0x04
     b7e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN9StatusLed8setColorENS_9ledColorsE>
		timeoffCounter_1 = 0;
     b82:	19 8e       	std	Y+25, r1	; 0x19
     b84:	18 8e       	std	Y+24, r1	; 0x18
		
		//Disables counter
		disable_timer0();
     b86:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z14disable_timer0v>
	}
}
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	08 95       	ret

00000b90 <_ZN7Monitor16channel2_timeoutEv>:

void Monitor::channel2_timeout(){
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	ec 01       	movw	r28, r24
	//Signal was interrupted for more than 5ms for the first time. Lighting the led red
	if(stateM_2 == GREEN){
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	81 30       	cpi	r24, 0x01	; 1
     b9a:	41 f4       	brne	.+16     	; 0xbac <_ZN7Monitor16channel2_timeoutEv+0x1c>
		stateM_2 = RED;
     b9c:	19 82       	std	Y+1, r1	; 0x01
		l2->setColor(StatusLed::RED);
     b9e:	61 e0       	ldi	r22, 0x01	; 1
     ba0:	8d 81       	ldd	r24, Y+5	; 0x05
     ba2:	9e 81       	ldd	r25, Y+6	; 0x06
     ba4:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN9StatusLed8setColorENS_9ledColorsE>
		timeoffCounter_2 = 0;
     ba8:	1b 8e       	std	Y+27, r1	; 0x1b
     baa:	1a 8e       	std	Y+26, r1	; 0x1a
	}
	
	//Increments the counter of timeoffs
	timeoffCounter_2++;
     bac:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bae:	9b 8d       	ldd	r25, Y+27	; 0x1b
     bb0:	01 96       	adiw	r24, 0x01	; 1
     bb2:	9b 8f       	std	Y+27, r25	; 0x1b
     bb4:	8a 8f       	std	Y+26, r24	; 0x1a
	
	if(timeoffCounter_2 >= 100 && stateM_2 == RED){
     bb6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bb8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     bba:	84 36       	cpi	r24, 0x64	; 100
     bbc:	91 05       	cpc	r25, r1
     bbe:	a4 f0       	brlt	.+40     	; 0xbe8 <_ZN7Monitor16channel2_timeoutEv+0x58>
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	88 23       	and	r24, r24
     bc4:	29 f0       	breq	.+10     	; 0xbd0 <_ZN7Monitor16channel2_timeoutEv+0x40>
     bc6:	10 c0       	rjmp	.+32     	; 0xbe8 <_ZN7Monitor16channel2_timeoutEv+0x58>
		l2->setColor(StatusLed::OFF);
		timeoffCounter_2 = 0;
		
		//Disables Timer
		disable_timer1();
		}else if(timeoffCounter_2 >= 100 && stateM_2 == OFF){
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	82 30       	cpi	r24, 0x02	; 2
     bcc:	f1 f4       	brne	.+60     	; 0xc0a <_ZN7Monitor16channel2_timeoutEv+0x7a>
     bce:	12 c0       	rjmp	.+36     	; 0xbf4 <_ZN7Monitor16channel2_timeoutEv+0x64>
	//Increments the counter of timeoffs
	timeoffCounter_2++;
	
	if(timeoffCounter_2 >= 100 && stateM_2 == RED){
		//Disconnected for more than 0.5s
		stateM_2 = OFF;
     bd0:	82 e0       	ldi	r24, 0x02	; 2
     bd2:	89 83       	std	Y+1, r24	; 0x01
		l2->setColor(StatusLed::OFF);
     bd4:	60 e0       	ldi	r22, 0x00	; 0
     bd6:	8d 81       	ldd	r24, Y+5	; 0x05
     bd8:	9e 81       	ldd	r25, Y+6	; 0x06
     bda:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN9StatusLed8setColorENS_9ledColorsE>
		timeoffCounter_2 = 0;
     bde:	1b 8e       	std	Y+27, r1	; 0x1b
     be0:	1a 8e       	std	Y+26, r1	; 0x1a
		
		//Disables Timer
		disable_timer1();
     be2:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z14disable_timer1v>
     be6:	11 c0       	rjmp	.+34     	; 0xc0a <_ZN7Monitor16channel2_timeoutEv+0x7a>
		}else if(timeoffCounter_2 >= 100 && stateM_2 == OFF){
     be8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bea:	9b 8d       	ldd	r25, Y+27	; 0x1b
     bec:	84 36       	cpi	r24, 0x64	; 100
     bee:	91 05       	cpc	r25, r1
     bf0:	5c f7       	brge	.-42     	; 0xbc8 <_ZN7Monitor16channel2_timeoutEv+0x38>
     bf2:	0b c0       	rjmp	.+22     	; 0xc0a <_ZN7Monitor16channel2_timeoutEv+0x7a>
		//Connected. Waited 0.5s before turning to green
		stateM_2 = GREEN;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	89 83       	std	Y+1, r24	; 0x01
		l2->setColor(StatusLed::GREEN);
     bf8:	62 e0       	ldi	r22, 0x02	; 2
     bfa:	8d 81       	ldd	r24, Y+5	; 0x05
     bfc:	9e 81       	ldd	r25, Y+6	; 0x06
     bfe:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN9StatusLed8setColorENS_9ledColorsE>
		timeoffCounter_2 = 0;
     c02:	1b 8e       	std	Y+27, r1	; 0x1b
     c04:	1a 8e       	std	Y+26, r1	; 0x1a
		
		//Disables counter
		disable_timer1();
     c06:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z14disable_timer1v>
	}
}
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	08 95       	ret

00000c10 <_ZN7Monitor16channel3_timeoutEv>:

void Monitor::channel3_timeout(){
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	ec 01       	movw	r28, r24
	//Signal was interrupted for more than 5ms for the first time. Lighting the led red
	if(stateM_3 == GREEN){
     c16:	8a 81       	ldd	r24, Y+2	; 0x02
     c18:	81 30       	cpi	r24, 0x01	; 1
     c1a:	41 f4       	brne	.+16     	; 0xc2c <_ZN7Monitor16channel3_timeoutEv+0x1c>
		stateM_3 = RED;
     c1c:	1a 82       	std	Y+2, r1	; 0x02
		l3->setColor(StatusLed::RED);
     c1e:	61 e0       	ldi	r22, 0x01	; 1
     c20:	8f 81       	ldd	r24, Y+7	; 0x07
     c22:	98 85       	ldd	r25, Y+8	; 0x08
     c24:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN9StatusLed8setColorENS_9ledColorsE>
		timeoffCounter_3 = 0;
     c28:	1d 8e       	std	Y+29, r1	; 0x1d
     c2a:	1c 8e       	std	Y+28, r1	; 0x1c
	}
	
	//Increments the counter of timeoffs
	timeoffCounter_3++;
     c2c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c2e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     c30:	01 96       	adiw	r24, 0x01	; 1
     c32:	9d 8f       	std	Y+29, r25	; 0x1d
     c34:	8c 8f       	std	Y+28, r24	; 0x1c
	
	if(timeoffCounter_3 >= 100 && stateM_3 == RED){
     c36:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c38:	9d 8d       	ldd	r25, Y+29	; 0x1d
     c3a:	84 36       	cpi	r24, 0x64	; 100
     c3c:	91 05       	cpc	r25, r1
     c3e:	a4 f0       	brlt	.+40     	; 0xc68 <_ZN7Monitor16channel3_timeoutEv+0x58>
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	88 23       	and	r24, r24
     c44:	29 f0       	breq	.+10     	; 0xc50 <_ZN7Monitor16channel3_timeoutEv+0x40>
     c46:	10 c0       	rjmp	.+32     	; 0xc68 <_ZN7Monitor16channel3_timeoutEv+0x58>
		l3->setColor(StatusLed::OFF);
		timeoffCounter_3 = 0;
		
		//Disables Timer
		disable_timer2();
		}else if(timeoffCounter_3 >= 100 && stateM_3 == OFF){
     c48:	8a 81       	ldd	r24, Y+2	; 0x02
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	f1 f4       	brne	.+60     	; 0xc8a <_ZN7Monitor16channel3_timeoutEv+0x7a>
     c4e:	12 c0       	rjmp	.+36     	; 0xc74 <_ZN7Monitor16channel3_timeoutEv+0x64>
	//Increments the counter of timeoffs
	timeoffCounter_3++;
	
	if(timeoffCounter_3 >= 100 && stateM_3 == RED){
		//Disconnected for more than 0.5s
		stateM_3 = OFF;
     c50:	82 e0       	ldi	r24, 0x02	; 2
     c52:	8a 83       	std	Y+2, r24	; 0x02
		l3->setColor(StatusLed::OFF);
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	8f 81       	ldd	r24, Y+7	; 0x07
     c58:	98 85       	ldd	r25, Y+8	; 0x08
     c5a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN9StatusLed8setColorENS_9ledColorsE>
		timeoffCounter_3 = 0;
     c5e:	1d 8e       	std	Y+29, r1	; 0x1d
     c60:	1c 8e       	std	Y+28, r1	; 0x1c
		
		//Disables Timer
		disable_timer2();
     c62:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z14disable_timer2v>
     c66:	11 c0       	rjmp	.+34     	; 0xc8a <_ZN7Monitor16channel3_timeoutEv+0x7a>
		}else if(timeoffCounter_3 >= 100 && stateM_3 == OFF){
     c68:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c6a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     c6c:	84 36       	cpi	r24, 0x64	; 100
     c6e:	91 05       	cpc	r25, r1
     c70:	5c f7       	brge	.-42     	; 0xc48 <_ZN7Monitor16channel3_timeoutEv+0x38>
     c72:	0b c0       	rjmp	.+22     	; 0xc8a <_ZN7Monitor16channel3_timeoutEv+0x7a>
		//Connected. Waited 0.5s before turning to green
		stateM_3 = GREEN;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	8a 83       	std	Y+2, r24	; 0x02
		l3->setColor(StatusLed::GREEN);
     c78:	62 e0       	ldi	r22, 0x02	; 2
     c7a:	8f 81       	ldd	r24, Y+7	; 0x07
     c7c:	98 85       	ldd	r25, Y+8	; 0x08
     c7e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN9StatusLed8setColorENS_9ledColorsE>
		timeoffCounter_3 = 0;
     c82:	1d 8e       	std	Y+29, r1	; 0x1d
     c84:	1c 8e       	std	Y+28, r1	; 0x1c
		
		//Disables counter
		disable_timer2();
     c86:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z14disable_timer2v>
	}
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	08 95       	ret

00000c90 <_ZN8Ohmmeter14getMeasurementEv>:
ï»¿#include "ohmmeter.h"
#include <avr/io.h>

float Ohmmeter::getMeasurement(){
     c90:	4f 92       	push	r4
     c92:	5f 92       	push	r5
     c94:	6f 92       	push	r6
     c96:	7f 92       	push	r7
     c98:	8f 92       	push	r8
     c9a:	9f 92       	push	r9
     c9c:	af 92       	push	r10
     c9e:	bf 92       	push	r11
     ca0:	cf 92       	push	r12
     ca2:	df 92       	push	r13
     ca4:	ef 92       	push	r14
     ca6:	ff 92       	push	r15
     ca8:	0f 93       	push	r16
     caa:	1f 93       	push	r17
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
     cb0:	ec 01       	movw	r28, r24
	uint16_t result = 0;
	float ohm;
	float volt;
	
	//Disabling power reduction on ADC
	PRR &= ~(1 << PRADC);
     cb2:	e4 e6       	ldi	r30, 0x64	; 100
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	8e 7f       	andi	r24, 0xFE	; 254
     cba:	80 83       	st	Z, r24
		
	//sets both Vref as AVcc and Input pin as A0
	ADMUX = 0;
     cbc:	ec e7       	ldi	r30, 0x7C	; 124
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0); 
     cc2:	80 81       	ld	r24, Z
     cc4:	80 64       	ori	r24, 0x40	; 64
     cc6:	80 83       	st	Z, r24
	
	//Sets the ADC clock prescaler to 128
	ADCSRA |= (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0); 
     cc8:	ea e7       	ldi	r30, 0x7A	; 122
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	87 60       	ori	r24, 0x07	; 7
     cd0:	80 83       	st	Z, r24
	
	//Enables the ADC
	ADCSRA |= (1 << ADEN);
     cd2:	80 81       	ld	r24, Z
     cd4:	80 68       	ori	r24, 0x80	; 128
     cd6:	80 83       	st	Z, r24
	
	//Starts the conversion
	ADCSRA |= (1 << ADSC); 
     cd8:	80 81       	ld	r24, Z
     cda:	80 64       	ori	r24, 0x40	; 64
     cdc:	80 83       	st	Z, r24
	
	//While conversion not finished
	while((ADCSRA & (1 << ADIF)) != (1 << ADIF)); 
     cde:	80 81       	ld	r24, Z
     ce0:	84 ff       	sbrs	r24, 4
     ce2:	fd cf       	rjmp	.-6      	; 0xcde <_ZN8Ohmmeter14getMeasurementEv+0x4e>
	
	//Gather result
	result |= ADCL;
     ce4:	10 91 78 00 	lds	r17, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	result |= ADCH << 8;
     ce8:	00 91 79 00 	lds	r16, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	
	//Shuts down ADC
	ADCSRA &= ~(1 << ADEN);
     cec:	ea e7       	ldi	r30, 0x7A	; 122
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	8f 77       	andi	r24, 0x7F	; 127
     cf4:	80 83       	st	Z, r24
		
	//Enables power reduction on ADC
	PRR |= (1 << PRADC);
     cf6:	e4 e6       	ldi	r30, 0x64	; 100
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	81 60       	ori	r24, 0x01	; 1
     cfe:	80 83       	st	Z, r24
		
	//Converts the result to a 0-vSource result
	volt = ((float) result/1024)*vSource; 
     d00:	68 85       	ldd	r22, Y+8	; 0x08
     d02:	79 85       	ldd	r23, Y+9	; 0x09
     d04:	07 2e       	mov	r0, r23
     d06:	00 0c       	add	r0, r0
     d08:	88 0b       	sbc	r24, r24
     d0a:	99 0b       	sbc	r25, r25
     d0c:	0e 94 a1 08 	call	0x1142	; 0x1142 <__floatsisf>
     d10:	6b 01       	movw	r12, r22
     d12:	7c 01       	movw	r14, r24
     d14:	61 2f       	mov	r22, r17
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	70 2b       	or	r23, r16
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0e 94 9f 08 	call	0x113e	; 0x113e <__floatunsisf>
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 e8       	ldi	r20, 0x80	; 128
     d28:	5a e3       	ldi	r21, 0x3A	; 58
     d2a:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
     d2e:	a7 01       	movw	r20, r14
     d30:	96 01       	movw	r18, r12
     d32:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
	
	//V seen by AO
	volt /= (float) ampGain; 
     d36:	28 81       	ld	r18, Y
     d38:	39 81       	ldd	r19, Y+1	; 0x01
     d3a:	4a 81       	ldd	r20, Y+2	; 0x02
     d3c:	5b 81       	ldd	r21, Y+3	; 0x03
     d3e:	0e 94 f7 07 	call	0xfee	; 0xfee <__divsf3>
     d42:	4b 01       	movw	r8, r22
     d44:	5c 01       	movw	r10, r24
	
	//Translates V into R
	ohm = (float) volt*rl/vSource; 
     d46:	4c 80       	ldd	r4, Y+4	; 0x04
     d48:	5d 80       	ldd	r5, Y+5	; 0x05
     d4a:	6e 80       	ldd	r6, Y+6	; 0x06
     d4c:	7f 80       	ldd	r7, Y+7	; 0x07
	
	//Second iteration for more precision
	//Because total resistance > rl
	ohm = (float) volt*(rl + ohm)/vSource;
     d4e:	a3 01       	movw	r20, r6
     d50:	92 01       	movw	r18, r4
     d52:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
     d56:	a7 01       	movw	r20, r14
     d58:	96 01       	movw	r18, r12
     d5a:	0e 94 f7 07 	call	0xfee	; 0xfee <__divsf3>
     d5e:	a3 01       	movw	r20, r6
     d60:	92 01       	movw	r18, r4
     d62:	0e 94 86 07 	call	0xf0c	; 0xf0c <__addsf3>
     d66:	a5 01       	movw	r20, r10
     d68:	94 01       	movw	r18, r8
     d6a:	0e 94 a9 09 	call	0x1352	; 0x1352 <__mulsf3>
	
	return ohm;
     d6e:	a7 01       	movw	r20, r14
     d70:	96 01       	movw	r18, r12
     d72:	0e 94 f7 07 	call	0xfee	; 0xfee <__divsf3>
}
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	ff 90       	pop	r15
     d80:	ef 90       	pop	r14
     d82:	df 90       	pop	r13
     d84:	cf 90       	pop	r12
     d86:	bf 90       	pop	r11
     d88:	af 90       	pop	r10
     d8a:	9f 90       	pop	r9
     d8c:	8f 90       	pop	r8
     d8e:	7f 90       	pop	r7
     d90:	6f 90       	pop	r6
     d92:	5f 90       	pop	r5
     d94:	4f 90       	pop	r4
     d96:	08 95       	ret

00000d98 <_ZN8OhmmeterC1Effi>:

Ohmmeter::Ohmmeter(float gain, float rlOhm, int vSrc){
     d98:	ef 92       	push	r14
     d9a:	ff 92       	push	r15
     d9c:	0f 93       	push	r16
     d9e:	1f 93       	push	r17
     da0:	fc 01       	movw	r30, r24
	//Setting variables
	ampGain = gain;
     da2:	40 83       	st	Z, r20
     da4:	51 83       	std	Z+1, r21	; 0x01
     da6:	62 83       	std	Z+2, r22	; 0x02
     da8:	73 83       	std	Z+3, r23	; 0x03
	rl = rlOhm;
     daa:	04 83       	std	Z+4, r16	; 0x04
     dac:	15 83       	std	Z+5, r17	; 0x05
     dae:	26 83       	std	Z+6, r18	; 0x06
     db0:	37 83       	std	Z+7, r19	; 0x07
	vSource = vSrc;
     db2:	f1 86       	std	Z+9, r15	; 0x09
     db4:	e0 86       	std	Z+8, r14	; 0x08
     db6:	1f 91       	pop	r17
     db8:	0f 91       	pop	r16
     dba:	ff 90       	pop	r15
     dbc:	ef 90       	pop	r14
     dbe:	08 95       	ret

00000dc0 <_ZN9StatusLed8setColorENS_9ledColorsE>:
	*(portGreen-1) |= (1 << pinGreen);
	
	setColor(OFF);
}

void StatusLed::setColor(ledColors color){
     dc0:	fc 01       	movw	r30, r24
	this->set_color = color;
     dc2:	60 87       	std	Z+8, r22	; 0x08
	if (color == OFF){/*OFF*/
     dc4:	61 11       	cpse	r22, r1
     dc6:	1d c0       	rjmp	.+58     	; 0xe02 <_ZN9StatusLed8setColorENS_9ledColorsE+0x42>
		*portRed &= ~(1 << pinRed);
     dc8:	a0 81       	ld	r26, Z
     dca:	b1 81       	ldd	r27, Z+1	; 0x01
     dcc:	3c 91       	ld	r19, X
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	ac 01       	movw	r20, r24
     dd4:	04 80       	ldd	r0, Z+4	; 0x04
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <_ZN9StatusLed8setColorENS_9ledColorsE+0x1c>
     dd8:	44 0f       	add	r20, r20
     dda:	55 1f       	adc	r21, r21
     ddc:	0a 94       	dec	r0
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <_ZN9StatusLed8setColorENS_9ledColorsE+0x18>
     de0:	24 2f       	mov	r18, r20
     de2:	20 95       	com	r18
     de4:	23 23       	and	r18, r19
     de6:	2c 93       	st	X, r18
		*portGreen &= ~(1 << pinGreen);
     de8:	a2 81       	ldd	r26, Z+2	; 0x02
     dea:	b3 81       	ldd	r27, Z+3	; 0x03
     dec:	2c 91       	ld	r18, X
     dee:	06 80       	ldd	r0, Z+6	; 0x06
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <_ZN9StatusLed8setColorENS_9ledColorsE+0x36>
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	0a 94       	dec	r0
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <_ZN9StatusLed8setColorENS_9ledColorsE+0x32>
     dfa:	80 95       	com	r24
     dfc:	82 23       	and	r24, r18
     dfe:	8c 93       	st	X, r24
     e00:	08 95       	ret
	}else if (color == RED){/*RED*/
     e02:	61 30       	cpi	r22, 0x01	; 1
     e04:	d9 f4       	brne	.+54     	; 0xe3c <_ZN9StatusLed8setColorENS_9ledColorsE+0x7c>
		*portRed |= (1 << pinRed);
     e06:	a0 81       	ld	r26, Z
     e08:	b1 81       	ldd	r27, Z+1	; 0x01
     e0a:	4c 91       	ld	r20, X
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	9c 01       	movw	r18, r24
     e12:	04 80       	ldd	r0, Z+4	; 0x04
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <_ZN9StatusLed8setColorENS_9ledColorsE+0x5a>
     e16:	22 0f       	add	r18, r18
     e18:	33 1f       	adc	r19, r19
     e1a:	0a 94       	dec	r0
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <_ZN9StatusLed8setColorENS_9ledColorsE+0x56>
     e1e:	24 2b       	or	r18, r20
     e20:	2c 93       	st	X, r18
		*portGreen &= ~(1 << pinGreen);
     e22:	a2 81       	ldd	r26, Z+2	; 0x02
     e24:	b3 81       	ldd	r27, Z+3	; 0x03
     e26:	2c 91       	ld	r18, X
     e28:	06 80       	ldd	r0, Z+6	; 0x06
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <_ZN9StatusLed8setColorENS_9ledColorsE+0x70>
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	0a 94       	dec	r0
     e32:	e2 f7       	brpl	.-8      	; 0xe2c <_ZN9StatusLed8setColorENS_9ledColorsE+0x6c>
     e34:	80 95       	com	r24
     e36:	82 23       	and	r24, r18
     e38:	8c 93       	st	X, r24
     e3a:	08 95       	ret
	}else if (color == GREEN){/*GREEN*/
     e3c:	62 30       	cpi	r22, 0x02	; 2
     e3e:	e1 f4       	brne	.+56     	; 0xe78 <_ZN9StatusLed8setColorENS_9ledColorsE+0xb8>
		*portRed &= ~(1 << pinRed);
     e40:	a0 81       	ld	r26, Z
     e42:	b1 81       	ldd	r27, Z+1	; 0x01
     e44:	3c 91       	ld	r19, X
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	ac 01       	movw	r20, r24
     e4c:	04 80       	ldd	r0, Z+4	; 0x04
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <_ZN9StatusLed8setColorENS_9ledColorsE+0x94>
     e50:	44 0f       	add	r20, r20
     e52:	55 1f       	adc	r21, r21
     e54:	0a 94       	dec	r0
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <_ZN9StatusLed8setColorENS_9ledColorsE+0x90>
     e58:	24 2f       	mov	r18, r20
     e5a:	20 95       	com	r18
     e5c:	23 23       	and	r18, r19
     e5e:	2c 93       	st	X, r18
		*portGreen |= (1 << pinGreen);
     e60:	a2 81       	ldd	r26, Z+2	; 0x02
     e62:	b3 81       	ldd	r27, Z+3	; 0x03
     e64:	2c 91       	ld	r18, X
     e66:	06 80       	ldd	r0, Z+6	; 0x06
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <_ZN9StatusLed8setColorENS_9ledColorsE+0xae>
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	0a 94       	dec	r0
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <_ZN9StatusLed8setColorENS_9ledColorsE+0xaa>
     e72:	82 2b       	or	r24, r18
     e74:	8c 93       	st	X, r24
     e76:	08 95       	ret
	}else if (color == ORANGE){/*ORANGE*/
     e78:	63 30       	cpi	r22, 0x03	; 3
     e7a:	c9 f4       	brne	.+50     	; 0xeae <_ZN9StatusLed8setColorENS_9ledColorsE+0xee>
		*portRed |= (1 << pinRed);
     e7c:	a0 81       	ld	r26, Z
     e7e:	b1 81       	ldd	r27, Z+1	; 0x01
     e80:	4c 91       	ld	r20, X
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	9c 01       	movw	r18, r24
     e88:	04 80       	ldd	r0, Z+4	; 0x04
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <_ZN9StatusLed8setColorENS_9ledColorsE+0xd0>
     e8c:	22 0f       	add	r18, r18
     e8e:	33 1f       	adc	r19, r19
     e90:	0a 94       	dec	r0
     e92:	e2 f7       	brpl	.-8      	; 0xe8c <_ZN9StatusLed8setColorENS_9ledColorsE+0xcc>
     e94:	24 2b       	or	r18, r20
     e96:	2c 93       	st	X, r18
		*portGreen |= (1 << pinGreen);
     e98:	a2 81       	ldd	r26, Z+2	; 0x02
     e9a:	b3 81       	ldd	r27, Z+3	; 0x03
     e9c:	2c 91       	ld	r18, X
     e9e:	06 80       	ldd	r0, Z+6	; 0x06
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <_ZN9StatusLed8setColorENS_9ledColorsE+0xe6>
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	0a 94       	dec	r0
     ea8:	e2 f7       	brpl	.-8      	; 0xea2 <_ZN9StatusLed8setColorENS_9ledColorsE+0xe2>
     eaa:	82 2b       	or	r24, r18
     eac:	8c 93       	st	X, r24
     eae:	08 95       	ret

00000eb0 <_ZN9StatusLedC1EPVhiS1_i>:
ï»¿#include "StatusLed.h"
#include <avr/io.h>

StatusLed::StatusLed(volatile uint8_t *portG, int pinG, volatile uint8_t *portR, int pinR){
     eb0:	0f 93       	push	r16
     eb2:	1f 93       	push	r17
     eb4:	fc 01       	movw	r30, r24
	
	portRed = portR;
     eb6:	20 83       	st	Z, r18
     eb8:	31 83       	std	Z+1, r19	; 0x01
	portGreen = portG;
     eba:	73 83       	std	Z+3, r23	; 0x03
     ebc:	62 83       	std	Z+2, r22	; 0x02
	
	pinRed = pinR;
     ebe:	04 83       	std	Z+4, r16	; 0x04
     ec0:	15 83       	std	Z+5, r17	; 0x05
	pinGreen = pinG;
     ec2:	57 83       	std	Z+7, r21	; 0x07
     ec4:	46 83       	std	Z+6, r20	; 0x06
	
	//Sets pins as output
	*(portRed-1) |= (1 << pinRed);
     ec6:	a2 2f       	mov	r26, r18
     ec8:	b3 2f       	mov	r27, r19
     eca:	4e 91       	ld	r20, -X
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	9c 01       	movw	r18, r24
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <_ZN9StatusLedC1EPVhiS1_i+0x28>
     ed4:	22 0f       	add	r18, r18
     ed6:	33 1f       	adc	r19, r19
     ed8:	0a 95       	dec	r16
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <_ZN9StatusLedC1EPVhiS1_i+0x24>
     edc:	24 2b       	or	r18, r20
     ede:	2c 93       	st	X, r18
	*(portGreen-1) |= (1 << pinGreen);
     ee0:	a2 81       	ldd	r26, Z+2	; 0x02
     ee2:	b3 81       	ldd	r27, Z+3	; 0x03
     ee4:	2e 91       	ld	r18, -X
     ee6:	06 80       	ldd	r0, Z+6	; 0x06
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <_ZN9StatusLedC1EPVhiS1_i+0x3e>
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	0a 94       	dec	r0
     ef0:	e2 f7       	brpl	.-8      	; 0xeea <_ZN9StatusLedC1EPVhiS1_i+0x3a>
     ef2:	82 2b       	or	r24, r18
     ef4:	8c 93       	st	X, r24
	
	setColor(OFF);
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	cf 01       	movw	r24, r30
     efa:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <_ZN9StatusLed8setColorENS_9ledColorsE>
}
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	08 95       	ret

00000f04 <_ZN9StatusLed8getColorEv>:
	}
}

StatusLed::ledColors StatusLed::getColor(){
	return this->set_color;
     f04:	fc 01       	movw	r30, r24
     f06:	80 85       	ldd	r24, Z+8	; 0x08
     f08:	08 95       	ret

00000f0a <__subsf3>:
     f0a:	50 58       	subi	r21, 0x80	; 128

00000f0c <__addsf3>:
     f0c:	bb 27       	eor	r27, r27
     f0e:	aa 27       	eor	r26, r26
     f10:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__addsf3x>
     f14:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__fp_round>
     f18:	0e 94 49 09 	call	0x1292	; 0x1292 <__fp_pscA>
     f1c:	38 f0       	brcs	.+14     	; 0xf2c <__addsf3+0x20>
     f1e:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__fp_pscB>
     f22:	20 f0       	brcs	.+8      	; 0xf2c <__addsf3+0x20>
     f24:	39 f4       	brne	.+14     	; 0xf34 <__addsf3+0x28>
     f26:	9f 3f       	cpi	r25, 0xFF	; 255
     f28:	19 f4       	brne	.+6      	; 0xf30 <__addsf3+0x24>
     f2a:	26 f4       	brtc	.+8      	; 0xf34 <__addsf3+0x28>
     f2c:	0c 94 46 09 	jmp	0x128c	; 0x128c <__fp_nan>
     f30:	0e f4       	brtc	.+2      	; 0xf34 <__addsf3+0x28>
     f32:	e0 95       	com	r30
     f34:	e7 fb       	bst	r30, 7
     f36:	0c 94 17 09 	jmp	0x122e	; 0x122e <__fp_inf>

00000f3a <__addsf3x>:
     f3a:	e9 2f       	mov	r30, r25
     f3c:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__fp_split3>
     f40:	58 f3       	brcs	.-42     	; 0xf18 <__addsf3+0xc>
     f42:	ba 17       	cp	r27, r26
     f44:	62 07       	cpc	r22, r18
     f46:	73 07       	cpc	r23, r19
     f48:	84 07       	cpc	r24, r20
     f4a:	95 07       	cpc	r25, r21
     f4c:	20 f0       	brcs	.+8      	; 0xf56 <__addsf3x+0x1c>
     f4e:	79 f4       	brne	.+30     	; 0xf6e <__addsf3x+0x34>
     f50:	a6 f5       	brtc	.+104    	; 0xfba <__addsf3x+0x80>
     f52:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__fp_zero>
     f56:	0e f4       	brtc	.+2      	; 0xf5a <__addsf3x+0x20>
     f58:	e0 95       	com	r30
     f5a:	0b 2e       	mov	r0, r27
     f5c:	ba 2f       	mov	r27, r26
     f5e:	a0 2d       	mov	r26, r0
     f60:	0b 01       	movw	r0, r22
     f62:	b9 01       	movw	r22, r18
     f64:	90 01       	movw	r18, r0
     f66:	0c 01       	movw	r0, r24
     f68:	ca 01       	movw	r24, r20
     f6a:	a0 01       	movw	r20, r0
     f6c:	11 24       	eor	r1, r1
     f6e:	ff 27       	eor	r31, r31
     f70:	59 1b       	sub	r21, r25
     f72:	99 f0       	breq	.+38     	; 0xf9a <__addsf3x+0x60>
     f74:	59 3f       	cpi	r21, 0xF9	; 249
     f76:	50 f4       	brcc	.+20     	; 0xf8c <__addsf3x+0x52>
     f78:	50 3e       	cpi	r21, 0xE0	; 224
     f7a:	68 f1       	brcs	.+90     	; 0xfd6 <__addsf3x+0x9c>
     f7c:	1a 16       	cp	r1, r26
     f7e:	f0 40       	sbci	r31, 0x00	; 0
     f80:	a2 2f       	mov	r26, r18
     f82:	23 2f       	mov	r18, r19
     f84:	34 2f       	mov	r19, r20
     f86:	44 27       	eor	r20, r20
     f88:	58 5f       	subi	r21, 0xF8	; 248
     f8a:	f3 cf       	rjmp	.-26     	; 0xf72 <__addsf3x+0x38>
     f8c:	46 95       	lsr	r20
     f8e:	37 95       	ror	r19
     f90:	27 95       	ror	r18
     f92:	a7 95       	ror	r26
     f94:	f0 40       	sbci	r31, 0x00	; 0
     f96:	53 95       	inc	r21
     f98:	c9 f7       	brne	.-14     	; 0xf8c <__addsf3x+0x52>
     f9a:	7e f4       	brtc	.+30     	; 0xfba <__addsf3x+0x80>
     f9c:	1f 16       	cp	r1, r31
     f9e:	ba 0b       	sbc	r27, r26
     fa0:	62 0b       	sbc	r22, r18
     fa2:	73 0b       	sbc	r23, r19
     fa4:	84 0b       	sbc	r24, r20
     fa6:	ba f0       	brmi	.+46     	; 0xfd6 <__addsf3x+0x9c>
     fa8:	91 50       	subi	r25, 0x01	; 1
     faa:	a1 f0       	breq	.+40     	; 0xfd4 <__addsf3x+0x9a>
     fac:	ff 0f       	add	r31, r31
     fae:	bb 1f       	adc	r27, r27
     fb0:	66 1f       	adc	r22, r22
     fb2:	77 1f       	adc	r23, r23
     fb4:	88 1f       	adc	r24, r24
     fb6:	c2 f7       	brpl	.-16     	; 0xfa8 <__addsf3x+0x6e>
     fb8:	0e c0       	rjmp	.+28     	; 0xfd6 <__addsf3x+0x9c>
     fba:	ba 0f       	add	r27, r26
     fbc:	62 1f       	adc	r22, r18
     fbe:	73 1f       	adc	r23, r19
     fc0:	84 1f       	adc	r24, r20
     fc2:	48 f4       	brcc	.+18     	; 0xfd6 <__addsf3x+0x9c>
     fc4:	87 95       	ror	r24
     fc6:	77 95       	ror	r23
     fc8:	67 95       	ror	r22
     fca:	b7 95       	ror	r27
     fcc:	f7 95       	ror	r31
     fce:	9e 3f       	cpi	r25, 0xFE	; 254
     fd0:	08 f0       	brcs	.+2      	; 0xfd4 <__addsf3x+0x9a>
     fd2:	b0 cf       	rjmp	.-160    	; 0xf34 <__addsf3+0x28>
     fd4:	93 95       	inc	r25
     fd6:	88 0f       	add	r24, r24
     fd8:	08 f0       	brcs	.+2      	; 0xfdc <__addsf3x+0xa2>
     fda:	99 27       	eor	r25, r25
     fdc:	ee 0f       	add	r30, r30
     fde:	97 95       	ror	r25
     fe0:	87 95       	ror	r24
     fe2:	08 95       	ret

00000fe4 <__cmpsf2>:
     fe4:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <__fp_cmp>
     fe8:	08 f4       	brcc	.+2      	; 0xfec <__cmpsf2+0x8>
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	08 95       	ret

00000fee <__divsf3>:
     fee:	0e 94 0b 08 	call	0x1016	; 0x1016 <__divsf3x>
     ff2:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__fp_round>
     ff6:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__fp_pscB>
     ffa:	58 f0       	brcs	.+22     	; 0x1012 <__divsf3+0x24>
     ffc:	0e 94 49 09 	call	0x1292	; 0x1292 <__fp_pscA>
    1000:	40 f0       	brcs	.+16     	; 0x1012 <__divsf3+0x24>
    1002:	29 f4       	brne	.+10     	; 0x100e <__divsf3+0x20>
    1004:	5f 3f       	cpi	r21, 0xFF	; 255
    1006:	29 f0       	breq	.+10     	; 0x1012 <__divsf3+0x24>
    1008:	0c 94 17 09 	jmp	0x122e	; 0x122e <__fp_inf>
    100c:	51 11       	cpse	r21, r1
    100e:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__fp_szero>
    1012:	0c 94 46 09 	jmp	0x128c	; 0x128c <__fp_nan>

00001016 <__divsf3x>:
    1016:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__fp_split3>
    101a:	68 f3       	brcs	.-38     	; 0xff6 <__divsf3+0x8>

0000101c <__divsf3_pse>:
    101c:	99 23       	and	r25, r25
    101e:	b1 f3       	breq	.-20     	; 0x100c <__divsf3+0x1e>
    1020:	55 23       	and	r21, r21
    1022:	91 f3       	breq	.-28     	; 0x1008 <__divsf3+0x1a>
    1024:	95 1b       	sub	r25, r21
    1026:	55 0b       	sbc	r21, r21
    1028:	bb 27       	eor	r27, r27
    102a:	aa 27       	eor	r26, r26
    102c:	62 17       	cp	r22, r18
    102e:	73 07       	cpc	r23, r19
    1030:	84 07       	cpc	r24, r20
    1032:	38 f0       	brcs	.+14     	; 0x1042 <__divsf3_pse+0x26>
    1034:	9f 5f       	subi	r25, 0xFF	; 255
    1036:	5f 4f       	sbci	r21, 0xFF	; 255
    1038:	22 0f       	add	r18, r18
    103a:	33 1f       	adc	r19, r19
    103c:	44 1f       	adc	r20, r20
    103e:	aa 1f       	adc	r26, r26
    1040:	a9 f3       	breq	.-22     	; 0x102c <__divsf3_pse+0x10>
    1042:	35 d0       	rcall	.+106    	; 0x10ae <__divsf3_pse+0x92>
    1044:	0e 2e       	mov	r0, r30
    1046:	3a f0       	brmi	.+14     	; 0x1056 <__divsf3_pse+0x3a>
    1048:	e0 e8       	ldi	r30, 0x80	; 128
    104a:	32 d0       	rcall	.+100    	; 0x10b0 <__divsf3_pse+0x94>
    104c:	91 50       	subi	r25, 0x01	; 1
    104e:	50 40       	sbci	r21, 0x00	; 0
    1050:	e6 95       	lsr	r30
    1052:	00 1c       	adc	r0, r0
    1054:	ca f7       	brpl	.-14     	; 0x1048 <__divsf3_pse+0x2c>
    1056:	2b d0       	rcall	.+86     	; 0x10ae <__divsf3_pse+0x92>
    1058:	fe 2f       	mov	r31, r30
    105a:	29 d0       	rcall	.+82     	; 0x10ae <__divsf3_pse+0x92>
    105c:	66 0f       	add	r22, r22
    105e:	77 1f       	adc	r23, r23
    1060:	88 1f       	adc	r24, r24
    1062:	bb 1f       	adc	r27, r27
    1064:	26 17       	cp	r18, r22
    1066:	37 07       	cpc	r19, r23
    1068:	48 07       	cpc	r20, r24
    106a:	ab 07       	cpc	r26, r27
    106c:	b0 e8       	ldi	r27, 0x80	; 128
    106e:	09 f0       	breq	.+2      	; 0x1072 <__divsf3_pse+0x56>
    1070:	bb 0b       	sbc	r27, r27
    1072:	80 2d       	mov	r24, r0
    1074:	bf 01       	movw	r22, r30
    1076:	ff 27       	eor	r31, r31
    1078:	93 58       	subi	r25, 0x83	; 131
    107a:	5f 4f       	sbci	r21, 0xFF	; 255
    107c:	3a f0       	brmi	.+14     	; 0x108c <__divsf3_pse+0x70>
    107e:	9e 3f       	cpi	r25, 0xFE	; 254
    1080:	51 05       	cpc	r21, r1
    1082:	78 f0       	brcs	.+30     	; 0x10a2 <__divsf3_pse+0x86>
    1084:	0c 94 17 09 	jmp	0x122e	; 0x122e <__fp_inf>
    1088:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__fp_szero>
    108c:	5f 3f       	cpi	r21, 0xFF	; 255
    108e:	e4 f3       	brlt	.-8      	; 0x1088 <__divsf3_pse+0x6c>
    1090:	98 3e       	cpi	r25, 0xE8	; 232
    1092:	d4 f3       	brlt	.-12     	; 0x1088 <__divsf3_pse+0x6c>
    1094:	86 95       	lsr	r24
    1096:	77 95       	ror	r23
    1098:	67 95       	ror	r22
    109a:	b7 95       	ror	r27
    109c:	f7 95       	ror	r31
    109e:	9f 5f       	subi	r25, 0xFF	; 255
    10a0:	c9 f7       	brne	.-14     	; 0x1094 <__divsf3_pse+0x78>
    10a2:	88 0f       	add	r24, r24
    10a4:	91 1d       	adc	r25, r1
    10a6:	96 95       	lsr	r25
    10a8:	87 95       	ror	r24
    10aa:	97 f9       	bld	r25, 7
    10ac:	08 95       	ret
    10ae:	e1 e0       	ldi	r30, 0x01	; 1
    10b0:	66 0f       	add	r22, r22
    10b2:	77 1f       	adc	r23, r23
    10b4:	88 1f       	adc	r24, r24
    10b6:	bb 1f       	adc	r27, r27
    10b8:	62 17       	cp	r22, r18
    10ba:	73 07       	cpc	r23, r19
    10bc:	84 07       	cpc	r24, r20
    10be:	ba 07       	cpc	r27, r26
    10c0:	20 f0       	brcs	.+8      	; 0x10ca <__divsf3_pse+0xae>
    10c2:	62 1b       	sub	r22, r18
    10c4:	73 0b       	sbc	r23, r19
    10c6:	84 0b       	sbc	r24, r20
    10c8:	ba 0b       	sbc	r27, r26
    10ca:	ee 1f       	adc	r30, r30
    10cc:	88 f7       	brcc	.-30     	; 0x10b0 <__divsf3_pse+0x94>
    10ce:	e0 95       	com	r30
    10d0:	08 95       	ret

000010d2 <__fixsfsi>:
    10d2:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__fixunssfsi>
    10d6:	68 94       	set
    10d8:	b1 11       	cpse	r27, r1
    10da:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__fp_szero>
    10de:	08 95       	ret

000010e0 <__fixunssfsi>:
    10e0:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__fp_splitA>
    10e4:	88 f0       	brcs	.+34     	; 0x1108 <__fixunssfsi+0x28>
    10e6:	9f 57       	subi	r25, 0x7F	; 127
    10e8:	98 f0       	brcs	.+38     	; 0x1110 <__fixunssfsi+0x30>
    10ea:	b9 2f       	mov	r27, r25
    10ec:	99 27       	eor	r25, r25
    10ee:	b7 51       	subi	r27, 0x17	; 23
    10f0:	b0 f0       	brcs	.+44     	; 0x111e <__fixunssfsi+0x3e>
    10f2:	e1 f0       	breq	.+56     	; 0x112c <__fixunssfsi+0x4c>
    10f4:	66 0f       	add	r22, r22
    10f6:	77 1f       	adc	r23, r23
    10f8:	88 1f       	adc	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	1a f0       	brmi	.+6      	; 0x1104 <__fixunssfsi+0x24>
    10fe:	ba 95       	dec	r27
    1100:	c9 f7       	brne	.-14     	; 0x10f4 <__fixunssfsi+0x14>
    1102:	14 c0       	rjmp	.+40     	; 0x112c <__fixunssfsi+0x4c>
    1104:	b1 30       	cpi	r27, 0x01	; 1
    1106:	91 f0       	breq	.+36     	; 0x112c <__fixunssfsi+0x4c>
    1108:	0e 94 a2 09 	call	0x1344	; 0x1344 <__fp_zero>
    110c:	b1 e0       	ldi	r27, 0x01	; 1
    110e:	08 95       	ret
    1110:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__fp_zero>
    1114:	67 2f       	mov	r22, r23
    1116:	78 2f       	mov	r23, r24
    1118:	88 27       	eor	r24, r24
    111a:	b8 5f       	subi	r27, 0xF8	; 248
    111c:	39 f0       	breq	.+14     	; 0x112c <__fixunssfsi+0x4c>
    111e:	b9 3f       	cpi	r27, 0xF9	; 249
    1120:	cc f3       	brlt	.-14     	; 0x1114 <__fixunssfsi+0x34>
    1122:	86 95       	lsr	r24
    1124:	77 95       	ror	r23
    1126:	67 95       	ror	r22
    1128:	b3 95       	inc	r27
    112a:	d9 f7       	brne	.-10     	; 0x1122 <__fixunssfsi+0x42>
    112c:	3e f4       	brtc	.+14     	; 0x113c <__fixunssfsi+0x5c>
    112e:	90 95       	com	r25
    1130:	80 95       	com	r24
    1132:	70 95       	com	r23
    1134:	61 95       	neg	r22
    1136:	7f 4f       	sbci	r23, 0xFF	; 255
    1138:	8f 4f       	sbci	r24, 0xFF	; 255
    113a:	9f 4f       	sbci	r25, 0xFF	; 255
    113c:	08 95       	ret

0000113e <__floatunsisf>:
    113e:	e8 94       	clt
    1140:	09 c0       	rjmp	.+18     	; 0x1154 <__floatsisf+0x12>

00001142 <__floatsisf>:
    1142:	97 fb       	bst	r25, 7
    1144:	3e f4       	brtc	.+14     	; 0x1154 <__floatsisf+0x12>
    1146:	90 95       	com	r25
    1148:	80 95       	com	r24
    114a:	70 95       	com	r23
    114c:	61 95       	neg	r22
    114e:	7f 4f       	sbci	r23, 0xFF	; 255
    1150:	8f 4f       	sbci	r24, 0xFF	; 255
    1152:	9f 4f       	sbci	r25, 0xFF	; 255
    1154:	99 23       	and	r25, r25
    1156:	a9 f0       	breq	.+42     	; 0x1182 <__floatsisf+0x40>
    1158:	f9 2f       	mov	r31, r25
    115a:	96 e9       	ldi	r25, 0x96	; 150
    115c:	bb 27       	eor	r27, r27
    115e:	93 95       	inc	r25
    1160:	f6 95       	lsr	r31
    1162:	87 95       	ror	r24
    1164:	77 95       	ror	r23
    1166:	67 95       	ror	r22
    1168:	b7 95       	ror	r27
    116a:	f1 11       	cpse	r31, r1
    116c:	f8 cf       	rjmp	.-16     	; 0x115e <__floatsisf+0x1c>
    116e:	fa f4       	brpl	.+62     	; 0x11ae <__floatsisf+0x6c>
    1170:	bb 0f       	add	r27, r27
    1172:	11 f4       	brne	.+4      	; 0x1178 <__floatsisf+0x36>
    1174:	60 ff       	sbrs	r22, 0
    1176:	1b c0       	rjmp	.+54     	; 0x11ae <__floatsisf+0x6c>
    1178:	6f 5f       	subi	r22, 0xFF	; 255
    117a:	7f 4f       	sbci	r23, 0xFF	; 255
    117c:	8f 4f       	sbci	r24, 0xFF	; 255
    117e:	9f 4f       	sbci	r25, 0xFF	; 255
    1180:	16 c0       	rjmp	.+44     	; 0x11ae <__floatsisf+0x6c>
    1182:	88 23       	and	r24, r24
    1184:	11 f0       	breq	.+4      	; 0x118a <__floatsisf+0x48>
    1186:	96 e9       	ldi	r25, 0x96	; 150
    1188:	11 c0       	rjmp	.+34     	; 0x11ac <__floatsisf+0x6a>
    118a:	77 23       	and	r23, r23
    118c:	21 f0       	breq	.+8      	; 0x1196 <__floatsisf+0x54>
    118e:	9e e8       	ldi	r25, 0x8E	; 142
    1190:	87 2f       	mov	r24, r23
    1192:	76 2f       	mov	r23, r22
    1194:	05 c0       	rjmp	.+10     	; 0x11a0 <__floatsisf+0x5e>
    1196:	66 23       	and	r22, r22
    1198:	71 f0       	breq	.+28     	; 0x11b6 <__floatsisf+0x74>
    119a:	96 e8       	ldi	r25, 0x86	; 134
    119c:	86 2f       	mov	r24, r22
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	2a f0       	brmi	.+10     	; 0x11ae <__floatsisf+0x6c>
    11a4:	9a 95       	dec	r25
    11a6:	66 0f       	add	r22, r22
    11a8:	77 1f       	adc	r23, r23
    11aa:	88 1f       	adc	r24, r24
    11ac:	da f7       	brpl	.-10     	; 0x11a4 <__floatsisf+0x62>
    11ae:	88 0f       	add	r24, r24
    11b0:	96 95       	lsr	r25
    11b2:	87 95       	ror	r24
    11b4:	97 f9       	bld	r25, 7
    11b6:	08 95       	ret

000011b8 <floor>:
    11b8:	0e 94 8a 09 	call	0x1314	; 0x1314 <__fp_trunc>
    11bc:	90 f0       	brcs	.+36     	; 0x11e2 <floor+0x2a>
    11be:	9f 37       	cpi	r25, 0x7F	; 127
    11c0:	48 f4       	brcc	.+18     	; 0x11d4 <floor+0x1c>
    11c2:	91 11       	cpse	r25, r1
    11c4:	16 f0       	brts	.+4      	; 0x11ca <floor+0x12>
    11c6:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__fp_szero>
    11ca:	60 e0       	ldi	r22, 0x00	; 0
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	80 e8       	ldi	r24, 0x80	; 128
    11d0:	9f eb       	ldi	r25, 0xBF	; 191
    11d2:	08 95       	ret
    11d4:	26 f4       	brtc	.+8      	; 0x11de <floor+0x26>
    11d6:	1b 16       	cp	r1, r27
    11d8:	61 1d       	adc	r22, r1
    11da:	71 1d       	adc	r23, r1
    11dc:	81 1d       	adc	r24, r1
    11de:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__fp_mintl>
    11e2:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__fp_mpack>

000011e6 <__fp_cmp>:
    11e6:	99 0f       	add	r25, r25
    11e8:	00 08       	sbc	r0, r0
    11ea:	55 0f       	add	r21, r21
    11ec:	aa 0b       	sbc	r26, r26
    11ee:	e0 e8       	ldi	r30, 0x80	; 128
    11f0:	fe ef       	ldi	r31, 0xFE	; 254
    11f2:	16 16       	cp	r1, r22
    11f4:	17 06       	cpc	r1, r23
    11f6:	e8 07       	cpc	r30, r24
    11f8:	f9 07       	cpc	r31, r25
    11fa:	c0 f0       	brcs	.+48     	; 0x122c <__fp_cmp+0x46>
    11fc:	12 16       	cp	r1, r18
    11fe:	13 06       	cpc	r1, r19
    1200:	e4 07       	cpc	r30, r20
    1202:	f5 07       	cpc	r31, r21
    1204:	98 f0       	brcs	.+38     	; 0x122c <__fp_cmp+0x46>
    1206:	62 1b       	sub	r22, r18
    1208:	73 0b       	sbc	r23, r19
    120a:	84 0b       	sbc	r24, r20
    120c:	95 0b       	sbc	r25, r21
    120e:	39 f4       	brne	.+14     	; 0x121e <__fp_cmp+0x38>
    1210:	0a 26       	eor	r0, r26
    1212:	61 f0       	breq	.+24     	; 0x122c <__fp_cmp+0x46>
    1214:	23 2b       	or	r18, r19
    1216:	24 2b       	or	r18, r20
    1218:	25 2b       	or	r18, r21
    121a:	21 f4       	brne	.+8      	; 0x1224 <__fp_cmp+0x3e>
    121c:	08 95       	ret
    121e:	0a 26       	eor	r0, r26
    1220:	09 f4       	brne	.+2      	; 0x1224 <__fp_cmp+0x3e>
    1222:	a1 40       	sbci	r26, 0x01	; 1
    1224:	a6 95       	lsr	r26
    1226:	8f ef       	ldi	r24, 0xFF	; 255
    1228:	81 1d       	adc	r24, r1
    122a:	81 1d       	adc	r24, r1
    122c:	08 95       	ret

0000122e <__fp_inf>:
    122e:	97 f9       	bld	r25, 7
    1230:	9f 67       	ori	r25, 0x7F	; 127
    1232:	80 e8       	ldi	r24, 0x80	; 128
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	08 95       	ret

0000123a <__fp_mintl>:
    123a:	88 23       	and	r24, r24
    123c:	71 f4       	brne	.+28     	; 0x125a <__fp_mintl+0x20>
    123e:	77 23       	and	r23, r23
    1240:	21 f0       	breq	.+8      	; 0x124a <__fp_mintl+0x10>
    1242:	98 50       	subi	r25, 0x08	; 8
    1244:	87 2b       	or	r24, r23
    1246:	76 2f       	mov	r23, r22
    1248:	07 c0       	rjmp	.+14     	; 0x1258 <__fp_mintl+0x1e>
    124a:	66 23       	and	r22, r22
    124c:	11 f4       	brne	.+4      	; 0x1252 <__fp_mintl+0x18>
    124e:	99 27       	eor	r25, r25
    1250:	0d c0       	rjmp	.+26     	; 0x126c <__fp_mintl+0x32>
    1252:	90 51       	subi	r25, 0x10	; 16
    1254:	86 2b       	or	r24, r22
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	60 e0       	ldi	r22, 0x00	; 0
    125a:	2a f0       	brmi	.+10     	; 0x1266 <__fp_mintl+0x2c>
    125c:	9a 95       	dec	r25
    125e:	66 0f       	add	r22, r22
    1260:	77 1f       	adc	r23, r23
    1262:	88 1f       	adc	r24, r24
    1264:	da f7       	brpl	.-10     	; 0x125c <__fp_mintl+0x22>
    1266:	88 0f       	add	r24, r24
    1268:	96 95       	lsr	r25
    126a:	87 95       	ror	r24
    126c:	97 f9       	bld	r25, 7
    126e:	08 95       	ret

00001270 <__fp_mpack>:
    1270:	9f 3f       	cpi	r25, 0xFF	; 255
    1272:	31 f0       	breq	.+12     	; 0x1280 <__fp_mpack_finite+0xc>

00001274 <__fp_mpack_finite>:
    1274:	91 50       	subi	r25, 0x01	; 1
    1276:	20 f4       	brcc	.+8      	; 0x1280 <__fp_mpack_finite+0xc>
    1278:	87 95       	ror	r24
    127a:	77 95       	ror	r23
    127c:	67 95       	ror	r22
    127e:	b7 95       	ror	r27
    1280:	88 0f       	add	r24, r24
    1282:	91 1d       	adc	r25, r1
    1284:	96 95       	lsr	r25
    1286:	87 95       	ror	r24
    1288:	97 f9       	bld	r25, 7
    128a:	08 95       	ret

0000128c <__fp_nan>:
    128c:	9f ef       	ldi	r25, 0xFF	; 255
    128e:	80 ec       	ldi	r24, 0xC0	; 192
    1290:	08 95       	ret

00001292 <__fp_pscA>:
    1292:	00 24       	eor	r0, r0
    1294:	0a 94       	dec	r0
    1296:	16 16       	cp	r1, r22
    1298:	17 06       	cpc	r1, r23
    129a:	18 06       	cpc	r1, r24
    129c:	09 06       	cpc	r0, r25
    129e:	08 95       	ret

000012a0 <__fp_pscB>:
    12a0:	00 24       	eor	r0, r0
    12a2:	0a 94       	dec	r0
    12a4:	12 16       	cp	r1, r18
    12a6:	13 06       	cpc	r1, r19
    12a8:	14 06       	cpc	r1, r20
    12aa:	05 06       	cpc	r0, r21
    12ac:	08 95       	ret

000012ae <__fp_round>:
    12ae:	09 2e       	mov	r0, r25
    12b0:	03 94       	inc	r0
    12b2:	00 0c       	add	r0, r0
    12b4:	11 f4       	brne	.+4      	; 0x12ba <__fp_round+0xc>
    12b6:	88 23       	and	r24, r24
    12b8:	52 f0       	brmi	.+20     	; 0x12ce <__fp_round+0x20>
    12ba:	bb 0f       	add	r27, r27
    12bc:	40 f4       	brcc	.+16     	; 0x12ce <__fp_round+0x20>
    12be:	bf 2b       	or	r27, r31
    12c0:	11 f4       	brne	.+4      	; 0x12c6 <__fp_round+0x18>
    12c2:	60 ff       	sbrs	r22, 0
    12c4:	04 c0       	rjmp	.+8      	; 0x12ce <__fp_round+0x20>
    12c6:	6f 5f       	subi	r22, 0xFF	; 255
    12c8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ca:	8f 4f       	sbci	r24, 0xFF	; 255
    12cc:	9f 4f       	sbci	r25, 0xFF	; 255
    12ce:	08 95       	ret

000012d0 <__fp_split3>:
    12d0:	57 fd       	sbrc	r21, 7
    12d2:	90 58       	subi	r25, 0x80	; 128
    12d4:	44 0f       	add	r20, r20
    12d6:	55 1f       	adc	r21, r21
    12d8:	59 f0       	breq	.+22     	; 0x12f0 <__fp_splitA+0x10>
    12da:	5f 3f       	cpi	r21, 0xFF	; 255
    12dc:	71 f0       	breq	.+28     	; 0x12fa <__fp_splitA+0x1a>
    12de:	47 95       	ror	r20

000012e0 <__fp_splitA>:
    12e0:	88 0f       	add	r24, r24
    12e2:	97 fb       	bst	r25, 7
    12e4:	99 1f       	adc	r25, r25
    12e6:	61 f0       	breq	.+24     	; 0x1300 <__fp_splitA+0x20>
    12e8:	9f 3f       	cpi	r25, 0xFF	; 255
    12ea:	79 f0       	breq	.+30     	; 0x130a <__fp_splitA+0x2a>
    12ec:	87 95       	ror	r24
    12ee:	08 95       	ret
    12f0:	12 16       	cp	r1, r18
    12f2:	13 06       	cpc	r1, r19
    12f4:	14 06       	cpc	r1, r20
    12f6:	55 1f       	adc	r21, r21
    12f8:	f2 cf       	rjmp	.-28     	; 0x12de <__fp_split3+0xe>
    12fa:	46 95       	lsr	r20
    12fc:	f1 df       	rcall	.-30     	; 0x12e0 <__fp_splitA>
    12fe:	08 c0       	rjmp	.+16     	; 0x1310 <__fp_splitA+0x30>
    1300:	16 16       	cp	r1, r22
    1302:	17 06       	cpc	r1, r23
    1304:	18 06       	cpc	r1, r24
    1306:	99 1f       	adc	r25, r25
    1308:	f1 cf       	rjmp	.-30     	; 0x12ec <__fp_splitA+0xc>
    130a:	86 95       	lsr	r24
    130c:	71 05       	cpc	r23, r1
    130e:	61 05       	cpc	r22, r1
    1310:	08 94       	sec
    1312:	08 95       	ret

00001314 <__fp_trunc>:
    1314:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__fp_splitA>
    1318:	a0 f0       	brcs	.+40     	; 0x1342 <__fp_trunc+0x2e>
    131a:	be e7       	ldi	r27, 0x7E	; 126
    131c:	b9 17       	cp	r27, r25
    131e:	88 f4       	brcc	.+34     	; 0x1342 <__fp_trunc+0x2e>
    1320:	bb 27       	eor	r27, r27
    1322:	9f 38       	cpi	r25, 0x8F	; 143
    1324:	60 f4       	brcc	.+24     	; 0x133e <__fp_trunc+0x2a>
    1326:	16 16       	cp	r1, r22
    1328:	b1 1d       	adc	r27, r1
    132a:	67 2f       	mov	r22, r23
    132c:	78 2f       	mov	r23, r24
    132e:	88 27       	eor	r24, r24
    1330:	98 5f       	subi	r25, 0xF8	; 248
    1332:	f7 cf       	rjmp	.-18     	; 0x1322 <__fp_trunc+0xe>
    1334:	86 95       	lsr	r24
    1336:	77 95       	ror	r23
    1338:	67 95       	ror	r22
    133a:	b1 1d       	adc	r27, r1
    133c:	93 95       	inc	r25
    133e:	96 39       	cpi	r25, 0x96	; 150
    1340:	c8 f3       	brcs	.-14     	; 0x1334 <__fp_trunc+0x20>
    1342:	08 95       	ret

00001344 <__fp_zero>:
    1344:	e8 94       	clt

00001346 <__fp_szero>:
    1346:	bb 27       	eor	r27, r27
    1348:	66 27       	eor	r22, r22
    134a:	77 27       	eor	r23, r23
    134c:	cb 01       	movw	r24, r22
    134e:	97 f9       	bld	r25, 7
    1350:	08 95       	ret

00001352 <__mulsf3>:
    1352:	0e 94 bc 09 	call	0x1378	; 0x1378 <__mulsf3x>
    1356:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__fp_round>
    135a:	0e 94 49 09 	call	0x1292	; 0x1292 <__fp_pscA>
    135e:	38 f0       	brcs	.+14     	; 0x136e <__mulsf3+0x1c>
    1360:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__fp_pscB>
    1364:	20 f0       	brcs	.+8      	; 0x136e <__mulsf3+0x1c>
    1366:	95 23       	and	r25, r21
    1368:	11 f0       	breq	.+4      	; 0x136e <__mulsf3+0x1c>
    136a:	0c 94 17 09 	jmp	0x122e	; 0x122e <__fp_inf>
    136e:	0c 94 46 09 	jmp	0x128c	; 0x128c <__fp_nan>
    1372:	11 24       	eor	r1, r1
    1374:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__fp_szero>

00001378 <__mulsf3x>:
    1378:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__fp_split3>
    137c:	70 f3       	brcs	.-36     	; 0x135a <__mulsf3+0x8>

0000137e <__mulsf3_pse>:
    137e:	95 9f       	mul	r25, r21
    1380:	c1 f3       	breq	.-16     	; 0x1372 <__mulsf3+0x20>
    1382:	95 0f       	add	r25, r21
    1384:	50 e0       	ldi	r21, 0x00	; 0
    1386:	55 1f       	adc	r21, r21
    1388:	62 9f       	mul	r22, r18
    138a:	f0 01       	movw	r30, r0
    138c:	72 9f       	mul	r23, r18
    138e:	bb 27       	eor	r27, r27
    1390:	f0 0d       	add	r31, r0
    1392:	b1 1d       	adc	r27, r1
    1394:	63 9f       	mul	r22, r19
    1396:	aa 27       	eor	r26, r26
    1398:	f0 0d       	add	r31, r0
    139a:	b1 1d       	adc	r27, r1
    139c:	aa 1f       	adc	r26, r26
    139e:	64 9f       	mul	r22, r20
    13a0:	66 27       	eor	r22, r22
    13a2:	b0 0d       	add	r27, r0
    13a4:	a1 1d       	adc	r26, r1
    13a6:	66 1f       	adc	r22, r22
    13a8:	82 9f       	mul	r24, r18
    13aa:	22 27       	eor	r18, r18
    13ac:	b0 0d       	add	r27, r0
    13ae:	a1 1d       	adc	r26, r1
    13b0:	62 1f       	adc	r22, r18
    13b2:	73 9f       	mul	r23, r19
    13b4:	b0 0d       	add	r27, r0
    13b6:	a1 1d       	adc	r26, r1
    13b8:	62 1f       	adc	r22, r18
    13ba:	83 9f       	mul	r24, r19
    13bc:	a0 0d       	add	r26, r0
    13be:	61 1d       	adc	r22, r1
    13c0:	22 1f       	adc	r18, r18
    13c2:	74 9f       	mul	r23, r20
    13c4:	33 27       	eor	r19, r19
    13c6:	a0 0d       	add	r26, r0
    13c8:	61 1d       	adc	r22, r1
    13ca:	23 1f       	adc	r18, r19
    13cc:	84 9f       	mul	r24, r20
    13ce:	60 0d       	add	r22, r0
    13d0:	21 1d       	adc	r18, r1
    13d2:	82 2f       	mov	r24, r18
    13d4:	76 2f       	mov	r23, r22
    13d6:	6a 2f       	mov	r22, r26
    13d8:	11 24       	eor	r1, r1
    13da:	9f 57       	subi	r25, 0x7F	; 127
    13dc:	50 40       	sbci	r21, 0x00	; 0
    13de:	9a f0       	brmi	.+38     	; 0x1406 <__mulsf3_pse+0x88>
    13e0:	f1 f0       	breq	.+60     	; 0x141e <__mulsf3_pse+0xa0>
    13e2:	88 23       	and	r24, r24
    13e4:	4a f0       	brmi	.+18     	; 0x13f8 <__mulsf3_pse+0x7a>
    13e6:	ee 0f       	add	r30, r30
    13e8:	ff 1f       	adc	r31, r31
    13ea:	bb 1f       	adc	r27, r27
    13ec:	66 1f       	adc	r22, r22
    13ee:	77 1f       	adc	r23, r23
    13f0:	88 1f       	adc	r24, r24
    13f2:	91 50       	subi	r25, 0x01	; 1
    13f4:	50 40       	sbci	r21, 0x00	; 0
    13f6:	a9 f7       	brne	.-22     	; 0x13e2 <__mulsf3_pse+0x64>
    13f8:	9e 3f       	cpi	r25, 0xFE	; 254
    13fa:	51 05       	cpc	r21, r1
    13fc:	80 f0       	brcs	.+32     	; 0x141e <__mulsf3_pse+0xa0>
    13fe:	0c 94 17 09 	jmp	0x122e	; 0x122e <__fp_inf>
    1402:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__fp_szero>
    1406:	5f 3f       	cpi	r21, 0xFF	; 255
    1408:	e4 f3       	brlt	.-8      	; 0x1402 <__mulsf3_pse+0x84>
    140a:	98 3e       	cpi	r25, 0xE8	; 232
    140c:	d4 f3       	brlt	.-12     	; 0x1402 <__mulsf3_pse+0x84>
    140e:	86 95       	lsr	r24
    1410:	77 95       	ror	r23
    1412:	67 95       	ror	r22
    1414:	b7 95       	ror	r27
    1416:	f7 95       	ror	r31
    1418:	e7 95       	ror	r30
    141a:	9f 5f       	subi	r25, 0xFF	; 255
    141c:	c1 f7       	brne	.-16     	; 0x140e <__mulsf3_pse+0x90>
    141e:	fe 2b       	or	r31, r30
    1420:	88 0f       	add	r24, r24
    1422:	91 1d       	adc	r25, r1
    1424:	96 95       	lsr	r25
    1426:	87 95       	ror	r24
    1428:	97 f9       	bld	r25, 7
    142a:	08 95       	ret

0000142c <round>:
    142c:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__fp_splitA>
    1430:	e8 f0       	brcs	.+58     	; 0x146c <round+0x40>
    1432:	9e 37       	cpi	r25, 0x7E	; 126
    1434:	e8 f0       	brcs	.+58     	; 0x1470 <round+0x44>
    1436:	96 39       	cpi	r25, 0x96	; 150
    1438:	b8 f4       	brcc	.+46     	; 0x1468 <round+0x3c>
    143a:	9e 38       	cpi	r25, 0x8E	; 142
    143c:	48 f4       	brcc	.+18     	; 0x1450 <round+0x24>
    143e:	67 2f       	mov	r22, r23
    1440:	78 2f       	mov	r23, r24
    1442:	88 27       	eor	r24, r24
    1444:	98 5f       	subi	r25, 0xF8	; 248
    1446:	f9 cf       	rjmp	.-14     	; 0x143a <round+0xe>
    1448:	86 95       	lsr	r24
    144a:	77 95       	ror	r23
    144c:	67 95       	ror	r22
    144e:	93 95       	inc	r25
    1450:	95 39       	cpi	r25, 0x95	; 149
    1452:	d0 f3       	brcs	.-12     	; 0x1448 <round+0x1c>
    1454:	b6 2f       	mov	r27, r22
    1456:	b1 70       	andi	r27, 0x01	; 1
    1458:	6b 0f       	add	r22, r27
    145a:	71 1d       	adc	r23, r1
    145c:	81 1d       	adc	r24, r1
    145e:	20 f4       	brcc	.+8      	; 0x1468 <round+0x3c>
    1460:	87 95       	ror	r24
    1462:	77 95       	ror	r23
    1464:	67 95       	ror	r22
    1466:	93 95       	inc	r25
    1468:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__fp_mintl>
    146c:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__fp_mpack>
    1470:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__fp_szero>

00001474 <__tablejump2__>:
    1474:	ee 0f       	add	r30, r30
    1476:	ff 1f       	adc	r31, r31
    1478:	05 90       	lpm	r0, Z+
    147a:	f4 91       	lpm	r31, Z
    147c:	e0 2d       	mov	r30, r0
    147e:	09 94       	ijmp

00001480 <_exit>:
    1480:	f8 94       	cli

00001482 <__stop_program>:
    1482:	ff cf       	rjmp	.-2      	; 0x1482 <__stop_program>
